@using MisFinanzas.Services
@inherits LayoutComponentBase
@inject AuthService AuthService
@inject NavigationManager Navigation

<div class="page-wrapper">
    <NavMenu />
    <main class="main-content">
        @* --- ESTE ES EL CAMBIO CLAVE --- *@
        @if (!_isInitialized)
        {
            <div style="display: flex; justify-content: center; align-items: center; height: 80vh;">
                <div class="spinner-border" style="width: 3rem; height: 3rem;" role="status">
                    <span class="visually-hidden">Inicializando...</span>
                </div>
            </div>
        }
        else
        {
            <ErrorBoundary>
                <ChildContent>
                    @Body
                </ChildContent>
                <ErrorContent Context="ex">
                    @* Tu contenido de error se queda igual *@
                    <div style="background: rgba(244, 67, 54, 0.2); ...">
                        ...
                    </div>
                </ErrorContent>
            </ErrorBoundary>
        }
    </main>
</div>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    private bool _isInitialized = false; // <-- Nueva variable de estado

    private void ReloadPage()
    {
        Navigation.NavigateTo(Navigation.Uri, forceLoad: true);
    }

    protected override async Task OnInitializedAsync()
    {
        // Este método se ejecuta ANTES del renderizado.
        // Es el lugar perfecto para inicializar el servicio de autenticación.
        try
        {
            Console.WriteLine("🚀 MainLayout: OnInitializedAsync - Inicializando AuthService...");

            // Suscribirse a cambios en la autenticación para actualizar la UI si el usuario cierra sesión.
            AuthService.OnAuthStateChanged += OnAuthenticationStateChanged;

            await AuthService.InitializeAsync();

            Console.WriteLine($"🚀 MainLayout: AuthService inicializado - IsAuth: {AuthService.IsAuthenticated}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ MainLayout: Error catastrófico inicializando AuthService: {ex.Message}");
            // Aquí podrías redirigir a una página de error si la inicialización falla.
        }
        finally
        {
            _isInitialized = true; // <-- Marcamos que la inicialización terminó (con éxito o no)
        }
    }

    private async void OnAuthenticationStateChanged()
    {
        // Este método se llamará si el estado de auth cambia (ej. logout)
        await InvokeAsync(StateHasChanged);
    }

    // Método para limpiar la suscripción y evitar fugas de memoria
    public void Dispose()
    {
        AuthService.OnAuthStateChanged -= OnAuthenticationStateChanged;
    }
}

<style>
    .page-wrapper {
        min-height: 100vh;
        display: flex;
        flex-direction: column;
    }

    .main-content {
        flex: 1;
        margin-top: 70px;
        position: relative;
        z-index: 1;
    }
</style>