@using MisFinanzas.Services
@implements IDisposable
@inject NavigationManager NavigationManager
@inject AuthService AuthService
@inject IJSRuntime JSRuntime

<!-- ⭐ DEBUG TEMPORAL -->
<div style="position: fixed; top: 80px; left: 10px; background: red; color: white; padding: 10px; z-index: 9999; border-radius: 5px;">
    isAuthenticated: @AuthService.IsAuthenticated<br />
    isAdmin: @AuthService.IsAdmin<br />
    userName: @AuthService.UserName<br />
    isInitialized: @AuthService.IsInitialized
</div>

<!-- Nav Horizontal -->
<nav class="navbar-horizontal">
    <div class="navbar-content">

        <!-- User Section (solo desktop) -->
        <div class="navbar-user">
            @if (AuthService.IsAuthenticated)
            {
                <button @onclick="Logout" class="btn-logout" title="Cerrar Sesión">
                    <span style="font-size: 15px;">🔐</span>
                </button>
                <a href="@(AuthService.IsAdmin ? "/admin" : "/profile")" class="user-info">
                    <span style="font-size: 17px;">🧑‍💼</span>
                    <span class="user-name">@AuthService.UserName</span>
                </a>
            }
            else
            {
                <NavLink class="nav-link-horizontal" href="login">
                    <span style="font-size: 15px;">🔑</span>
                    <span>Iniciar Sesión</span>
                </NavLink>
            }
        </div>

        <!-- Links Horizontales (solo desktop) -->
        <div class="navbar-links">
            @if (AuthService.IsAuthenticated)
            {
                <NavLink class="nav-link-horizontal" href="/" Match="NavLinkMatch.All">
                    <span style="font-size: 17px;">🏠</span>
                    <span class="text-white">Inicio</span>
                </NavLink>
                <NavLink class="nav-link-horizontal" href="/dashboard">
                    <span style="font-size: 17px;">📊</span>
                    <span class="text-white">Dashboard</span>
                </NavLink>
                <NavLink class="nav-link-horizontal" href="/categories">
                    <span style="font-size: 17px;">📁</span>
                    <span class="text-white">Categorías</span>
                </NavLink>
                <NavLink class="nav-link-horizontal" href="/expenses-incomes">
                    <span style="font-size: 17px;">💳</span>
                    <span class="text-white">Transacciones</span>
                </NavLink>
                <NavLink class="nav-link-horizontal" href="/goals">
                    <span style="font-size: 17px;">🎯</span>
                    <span class="text-white">Metas</span>
                </NavLink>
                <NavLink class="nav-link-horizontal" href="/budgets">
                    <span style="font-size: 17px;">💰</span>
                    <span class="text-white">Presupuestos</span>
                </NavLink>
                @if (AuthService.IsAdmin)
                {
                    <NavLink class="nav-link-horizontal admin-link" href="/admin">
                        <span style="font-size: 17px;">👨‍💼</span>
                        <span class="text-white">Admin</span>
                    </NavLink>
                }
            }
        </div>

        <!-- Menu Horizontal en Mobile-->
        <div class="navbar-mobile">
            @if (AuthService.IsAuthenticated)
            {
                <button @onclick="Logout" class="btn-logout-mobile" title="Cerrar Sesión">
                    <span style="font-size: 15px;">🔐</span>
                </button>
                <a href="@(AuthService.IsAdmin ? "/admin" : "/profile")" class="user-info-mobile">
                    <span style="font-size: 17px;">🧑‍💼</span>
                    <span class="user-name">@AuthService.UserName</span>
                </a>
            }
        </div>
    </div>
</nav>

<!-- Footer Navegación Móvil -->
<nav class="footer-mobile-nav">
    @if (AuthService.IsAuthenticated)
    {
        <NavLink href="/" class="footer-nav-item" Match="NavLinkMatch.All">
            <span style="font-size: 17px;">🏠</span>
            <span class="text-white">Inicio</span>
        </NavLink>

        <NavLink href="/dashboard" class="footer-nav-item">
            <span style="font-size: 17px;">📊</span>
            <span class="text-white">Dashboard</span>
        </NavLink>

        <NavLink href="/categories" class="footer-nav-item">
            <span style="font-size: 17px;">📁</span>
            <span class="text-white">Categorías</span>
        </NavLink>

        <NavLink href="/expenses-incomes" class="footer-nav-item">
            <span style="font-size: 17px;">💳</span>
            <span class="text-white">Transacciones</span>
        </NavLink>

        <NavLink href="/goals" class="footer-nav-item">
            <span style="font-size: 17px;">🎯</span>
            <span class="text-white">Metas</span>
        </NavLink>

        <NavLink href="/budgets" class="footer-nav-item">
            <span style="font-size: 17px;">💰</span>
            <span class="text-white">Presupuestos</span>
        </NavLink>
    }
</nav>

@code {
    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("🔧 NavMenu: OnInitializedAsync - Suscribiéndose a AuthService...");
        AuthService.OnAuthStateChanged += HandleAuthStateChanged;

        // Si el AuthService no está inicializado, verificar autenticación
        if (!AuthService.IsInitialized)
        {
            Console.WriteLine("🔧 NavMenu: AuthService no inicializado, verificando autenticación...");
            await AuthService.CheckAuthenticationAsync();
        }

        Console.WriteLine($"🔧 NavMenu: Estado inicial - IsAuth: {AuthService.IsAuthenticated}");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Verificar autenticación después del primer render si es necesario
            if (!AuthService.IsInitialized)
            {
                Console.WriteLine("🔧 NavMenu: OnAfterRenderAsync - Verificando autenticación...");
                await AuthService.InitializeAsync();
            }
        }
    }

    private void HandleAuthStateChanged()
    {
        Console.WriteLine($"🔄 NavMenu: Recibida notificación de cambio de estado - IsAuth: {AuthService.IsAuthenticated}");
        InvokeAsync(StateHasChanged);
    }

    private async Task Logout()
    {
        Console.WriteLine("🔓 NavMenu: Iniciando logout...");
        await AuthService.LogoutAsync();
        NavigationManager.NavigateTo("/login", forceLoad: true);
    }

    public void Dispose()
    {
        Console.WriteLine("🧹 NavMenu: Dispose - Desuscribiendo de AuthService");
        AuthService.OnAuthStateChanged -= HandleAuthStateChanged;
    }
}