@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using MisFinanzas.Domain.Entities
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider

@using MisFinanzas.Components.Layout

@layout MinimalLayout

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Registrarse - Mis Finanzas</PageTitle>

<div style="min-height: 100vh; display: flex; align-items: center; justify-content: center; padding: 20px;">

    <div style="width: 100%; max-width: 1200px;">

        <!-- Hero Title -->
        <div class="glass-card animate-slide-up" style="padding: 40px; text-align: center; margin-bottom: 40px;">
            <h1 style="color: white; font-size: 2.5rem; margin-bottom: 15px; font-weight: 700;">
                ¡Únete a "Mis Finanzas"! 🚀
            </h1>
            <p style="color: white; font-size: 1.1rem;">
                Crea tu cuenta y comienza a tomar el control de tus finanzas
            </p>
        </div>

        <!-- Register Cards Container -->
        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(320px, 1fr)); gap: 30px;">

            <!-- Local Register Card -->
            <div class="glass-card animate-slide-up animate-delay-1" style="padding: 40px;">
                <div style="display: flex; align-items: center; gap: 12px; margin-bottom: 25px;">
                    <span style="font-size: 28px;">📝</span>
                    <h2 style="color: white; margin: 0; font-size: 1.5rem;">Crear Cuenta</h2>
                </div>

                <section>
                    <StatusMessage Message="@Message" />
                    <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger" role="alert" />

                        <div style="margin-bottom: 20px;">
                            <label for="email" style="color: white; display: block; margin-bottom: 8px; font-weight: 500;">
                                Email
                            </label>
                            <InputText @bind-Value="Input.Email"
                                       class="form-control"
                                       autocomplete="username"
                                       aria-required="true"
                                       placeholder="tu@email.com"
                                       style="background: rgba(255, 255, 255, 0.1); border: 1px solid rgba(255, 255, 255, 0.2); color: white; padding: 12px; border-radius: 8px;" />
                            <ValidationMessage For="() => Input.Email" class="text-danger" />
                        </div>

                        <div style="margin-bottom: 20px;">
                            <label for="password" style="color: white; display: block; margin-bottom: 8px; font-weight: 500;">
                                Contraseña
                            </label>
                            <InputText type="password"
                                       @bind-Value="Input.Password"
                                       class="form-control"
                                       autocomplete="new-password"
                                       aria-required="true"
                                       placeholder="••••••••"
                                       style="background: rgba(255, 255, 255, 0.1); border: 1px solid rgba(255, 255, 255, 0.2); color: white; padding: 12px; border-radius: 8px;" />
                            <ValidationMessage For="() => Input.Password" class="text-danger" />
                        </div>

                        <div style="margin-bottom: 25px;">
                            <label for="confirm-password" style="color: white; display: block; margin-bottom: 8px; font-weight: 500;">
                                Confirmar Contraseña
                            </label>
                            <InputText type="password"
                                       @bind-Value="Input.ConfirmPassword"
                                       class="form-control"
                                       autocomplete="new-password"
                                       aria-required="true"
                                       placeholder="••••••••"
                                       style="background: rgba(255, 255, 255, 0.1); border: 1px solid rgba(255, 255, 255, 0.2); color: white; padding: 12px; border-radius: 8px;" />
                            <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
                        </div>

                        <div>
                            <button type="submit" class="glass-button" style="width: 100%; padding: 14px; font-size: 1.1rem; font-weight: 600; border: none; cursor: pointer;">
                                Crear Cuenta
                            </button>
                        </div>
                    </EditForm>
                </section>

                <div style="margin-top: 25px; padding-top: 25px; border-top: 1px solid rgba(255, 255, 255, 0.1);">
                    <p style="color: white; margin: 0;">
                        ¿Ya tienes cuenta?
                        <a href="/Account/Login" style="color: #4CAF50; text-decoration: none; font-weight: 600;">
                            Inicia sesión aquí
                        </a>
                    </p>
                </div>
            </div>

            <!-- External Register Card -->
            <div class="glass-card animate-slide-up animate-delay-2" style="padding: 40px;">
                <div style="display: flex; align-items: center; gap: 12px; margin-bottom: 25px;">
                    <span style="font-size: 28px;">🌐</span>
                    <h2 style="color: white; margin: 0; font-size: 1.5rem;">Servicios Externos</h2>
                </div>

                <section>
                    <h3 style="color: white; font-size: 1rem; margin-bottom: 20px;">
                        Registrarse con otro servicio
                    </h3>
                    <div style="background: rgba(33, 150, 243, 0.1); border: 1px solid rgba(33, 150, 243, 0.3); border-radius: 8px; padding: 20px; margin-bottom: 20px;">
                        <span style="font-size: 48px; display: block; margin-bottom: 15px; text-align: center;">✨</span>
                        <p style="color: white; margin: 0; text-align: center; line-height: 1.6;">
                            Puedes registrarte usando tu email o a través de un servicio externo de autenticación.
                        </p>
                    </div>
                    <ExternalLoginPicker />
                </section>
            </div>

        </div>

        <!-- Back to Home Link -->
        <div style="text-align: center; margin-top: 30px;">
            <a href="/" class="glass-button" style="display: inline-block; padding: 12px 30px;">
                ← Volver al Inicio
            </a>
        </div>

    </div>

</div>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        Logger.LogInformation("User created a new account with password.");

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl ?? "/dashboard");
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}
