@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using MisFinanzas.Domain.Entities
@using MisFinanzas.Components.Account.Pages.Manage
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider

@using MisFinanzas.Components.Layout

@layout MinimalLayout

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Iniciar Sesión - Mis Finanzas</PageTitle>
<!-- Contendor principal del login -->
<div class="login-container">
    <!-- Segundo Contendor; para los formularios -->
    <div class="login-form-container">
        <!-- Tercer Contendor; para el titulo -->
        <div class="login-title-container glass-card animate-slide-up">
            <!-- Titulo -->
            <h1>¡Bienvenido de nuevo! 👋</h1>
            <!-- Texto debajo del Titulo -->
            <p>Inicia sesión para continuar gestionando tus finanzas</p>
        </div>
        <!-- Cuarto Contendor; para las cartas -->
        <div class="cards-container">
            <!-- Quinto Contendor; para la carta login-->
            <div class="login-card-container glass-card animate-slide-up animate-delay-1">
                <!-- Sexto Contendor; para el titulo de la carta login-->
                <div class="login-card-title-container">
                    <!-- Emoji-->
                    <span>🔐</span>
                    <!--Titulo de la carta login-->
                    <h2>Iniciar Sesión</h2>
                </div>
                <!--Septimo Contenedor; para el formulario de la carta login-->
                <section>
                    <StatusMessage Message="@errorMessage" />
                    <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger" role="alert" />

                        <div style="margin-bottom: 20px;">
                            <label for="email" style="color: white; display: block; margin-bottom: 8px; font-weight: 500;">
                                Email
                            </label>
                            <InputText @bind-Value="Input.Email"
                                       class="form-control"
                                       autocomplete="username"
                                       aria-required="true"
                                       placeholder="tu@email.com"
                                       style="background: rgba(255, 255, 255, 0.1); border: 1px solid rgba(255, 255, 255, 0.2); color: white; padding: 12px; border-radius: 8px;" />
                            <ValidationMessage For="() => Input.Email" class="text-danger" />
                        </div>

                        <div style="margin-bottom: 20px;">
                            <label for="password" style="color: white; display: block; margin-bottom: 8px; font-weight: 500;">
                                Contraseña
                            </label>
                            <InputText type="password"
                                       @bind-Value="Input.Password"
                                       class="form-control"
                                       autocomplete="current-password"
                                       aria-required="true"
                                       placeholder="••••••••"
                                       style="background: rgba(255, 255, 255, 0.1); border: 1px solid rgba(255, 255, 255, 0.2); color: white; padding: 12px; border-radius: 8px;" />
                            <ValidationMessage For="() => Input.Password" class="text-danger" />
                        </div>

                        <div style="margin-bottom: 20px;">
                            <label style="color: rgba(255, 255, 255, 0.9); display: flex; align-items: center; gap: 8px; cursor: pointer;">
                                <InputCheckbox @bind-Value="Input.RememberMe"
                                               style="width: 18px; height: 18px; cursor: pointer;" />
                                <span class="text-white">Recordarme</span>
                            </label>
                        </div>

                        <div>
                            <button type="submit" class="glass-button" style="width: 100%; padding: 14px; font-size: 1.1rem; font-weight: 600; border: none; cursor: pointer;">
                                Iniciar Sesión
                            </button>
                        </div>
                    </EditForm>
                </section>

                <div style="margin-top: 25px; padding-top: 25px; border-top: 1px solid rgba(255, 255, 255, 0.1);">
                    <p style="color: rgba(255, 255, 255, 0.8); margin-bottom: 10px;">
                        <a href="@(NavigationManager.GetUriWithQueryParameters("Account/ForgotPassword", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))"
                           style="color: #4CAF50; text-decoration: none;">
                            ¿Olvidaste tu contraseña?
                        </a>
                    </p>
                    <p style="color: rgba(255, 255, 255, 0.8); margin-bottom: 10px;">
                        <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))"
                           style="color: #4CAF50; text-decoration: none;">
                            Registrarse como nuevo usuario
                        </a>
                    </p>
                    <p style="color: rgba(255, 255, 255, 0.8); margin: 0;">
                        <a href="@(NavigationManager.GetUriWithQueryParameters("Account/ResendEmailConfirmation", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))"
                           style="color: #4CAF50; text-decoration: none;">
                            Reenviar correo de confirmación
                        </a>
                    </p>
                </div>
            </div>

            <!-- External Login Card -->
            <div class="glass-card animate-slide-up animate-delay-2" style="padding: 40px;">
                <div style="display: flex; align-items: center; gap: 12px; margin-bottom: 25px;">
                    <span style="font-size: 28px;">🌐</span>
                    <h2 style="color: white; margin: 0; font-size: 1.5rem;">Servicios Externos</h2>
                </div>

                <section>
                    <h3 style="color: white; font-size: 1rem; margin-bottom: 20px;">
                        Usa otro servicio para iniciar sesión
                    </h3>
                    @if ((externalLogins?.Count ?? 0) == 0)
                    {
                        <div style="background: rgba(255, 193, 7, 0.1); border: 1px solid rgba(255, 193, 7, 0.3); border-radius: 8px; padding: 20px; text-align: center;">
                            <span style="font-size: 48px; display: block; margin-bottom: 15px;">🔌</span>
                            <p style="color: rgba(255, 255, 255, 0.8); margin: 0;">
                                No hay servicios de autenticación externa configurados. Consulta
                                <a href="https://go.microsoft.com/fwlink/?LinkID=532715"
                                   style="color: #4CAF50; text-decoration: none;">
                                    este artículo
                                </a>
                                para más información sobre cómo configurar esta aplicación para admitir inicio de sesión a través de servicios externos.
                            </p>
                        </div>
                    }
                    else
                    {
                        <form class="form-horizontal" action="Account/PerformExternalLogin" method="post">
                            <AntiforgeryToken />
                            <input type="hidden" name="ReturnUrl" value="@ReturnUrl" />
                            <div style="display: flex; flex-direction: column; gap: 12px;">
                                @foreach (var provider in externalLogins!)
                                {
                                    <button type="submit"
                                            class="glass-button"
                                            name="provider"
                                            value="@provider.Name"
                                            title="Iniciar sesión usando tu cuenta de @provider.DisplayName"
                                            style="width: 100%; padding: 14px; font-size: 1rem; border: none; cursor: pointer; text-align: left; display: flex; align-items: center; gap: 10px;">
                                        <span style="font-size: 20px;">🔗</span>
                                        <span>@provider.DisplayName</span>
                                    </button>
                                }
                            </div>
                        </form>
                    }
                </section>
            </div>

        </div>

        <!-- Back to Home Link -->
        <div style="text-align: center; margin-top: 30px;">
            <a href="/" class="glass-button" style="display: inline-block; padding: 12px 30px;">
                ← Volver al Inicio
            </a>
        </div>

    </div>

</div>

@code {
    private string? errorMessage;
    private IList<AuthenticationScheme>? externalLogins; //ESTA ES LA NUEVA VARIABLE

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }

           // Obtener los proveedores externos configurados (Google, Microsoft, etc.)
        externalLogins = (await SignInManager.GetExternalAuthenticationSchemesAsync()).ToList();
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl ?? "/dashboard");
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
