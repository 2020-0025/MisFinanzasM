@page "/dashboard"
@using MisFinanzas.Domain.DTOs
@using MisFinanzas.Domain.Enums
@using MisFinanzas.Infrastructure.Interfaces
@using System.Security.Claims
@using Microsoft.AspNetCore.Authorization
@inject IExpenseIncomeService TransactionService
@inject ICategoryService CategoryService
@inject IFinancialGoalService GoalService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime
@attribute [Authorize]
@rendermode InteractiveServer
@implements IAsyncDisposable

<PageTitle>Dashboard - Mis Finanzas</PageTitle>

<div class="dashboard-container">
    
    <!-- Header con efecto glass -->
    <div class="glass-card dashboard-header animate-slide-up">
        <div class="d-flex justify-content-between align-items-center flex-wrap gap-3">
            <div>
                <h1 class="h3 mb-1 text-white fw-bold">
                    <span style="font-size: 32px;">📊</span>
                    <strong>Dashboard</strong>
                </h1>
                <p class="text-white mb-0">Resumen de tus finanzas</p>
            </div>
            <div class="glass-badge">
                <span style="font-size: 17px;">📅</span>
                <span class="text-white">Últimos @selectedDays días</span>
            </div>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="glass-card text-center py-5 animate-slide-up">
            <div class="spinner-border text-success" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">Cargando...</span>
            </div>
            <p class="text-white-50 mt-3 mb-0">Cargando tus datos financieros...</p>
        </div>
    }
    else
    {
        <!-- Summary Cards -->
        <div class="row g-4 mb-4">
            <!-- Balance Card -->
            <div class="col-xl-3 col-md-6">
                <div class="glass-card stat-card animate-slide-up h-100">
                    <div class="stat-card-body">
                        <div class="stat-icon balance-icon">
                            <span style="font-size: 32px;">💰</span>
                        </div>
                        <div class="stat-content">
                            <p class="stat-label text-white">Balance</p>
                            <h2 class="stat-value">@dashboardData.Balance.ToString("C0")</h2>
                            <small class="stat-subtitle text-white">
                                <span style="font-size: 15px;">📅</span>@selectedDays días
                            </small>
                        </div>
                    </div>
                    <div class="stat-footer text-white">
                        <span style="font-size: 17px;">💲</span>
                        Balance actual
                    </div>
                </div>
            </div>

            <!-- Income Card -->
            <div class="col-xl-3 col-md-6">
                <div class="glass-card stat-card animate-slide-up h-100" style="animation-delay: 0.1s;">
                    <div class="stat-card-body">
                        <div class="stat-icon income-icon">
                            <span style="font-size: 32px;">📈</span>
                        </div>
                        <div class="stat-content">
                            <p class="stat-label text-white">Ingresos</p>
                            <h2 class="stat-value text-info">@dashboardData.TotalIncome.ToString("C0")</h2>
                            <small class="stat-subtitle text-white">
                                <span style="font-size: 15px;">🔼</span>Entradas
                            </small>
                        </div>
                    </div>
                    <div class="stat-footer text-white">
                        <span style="font-size: 17px;">💵</span>
                        Total recibido
                    </div>
                </div>
            </div>

            <!-- Expense Card -->
            <div class="col-xl-3 col-md-6">
                <div class="glass-card stat-card animate-slide-up h-100" style="animation-delay: 0.2s;">
                    <div class="stat-card-body">
                        <div class="stat-icon expense-icon">
                            <span style="font-size: 32px;">📉</span>
                        </div>
                        <div class="stat-content">
                            <p class="stat-label text-white">Gastos</p>
                            <h2 class="stat-value text-danger">@dashboardData.TotalExpense.ToString("C0")</h2>
                            <small class="stat-subtitle text-danger">
                                <span style="font-size: 15px;">🔽</span>Salidas
                            </small>
                        </div>
                    </div>
                    <div class="stat-footer text-white">
                        <span style="font-size: 17px;">🛒</span>
                        Total gastado
                    </div>
                </div>
            </div>

            <!-- Goals Card -->
            <div class="col-xl-3 col-md-6">
                <div class="glass-card stat-card animate-slide-up h-100" style="animation-delay: 0.3s;">
                    <div class="stat-card-body">
                        <div class="stat-icon goals-icon">
                            <span style="font-size: 32px;">🎯</span>
                        </div>
                        <div class="stat-content">
                            <p class="stat-label text-white">Metas</p>
                            <h2 class="stat-value text-info">@dashboardData.CompletedGoals/@dashboardData.TotalGoals</h2>
                            <small class="stat-subtitle text-info">
                                <span style="font-size: 15px;">🚩</span>Completadas
                            </small>
                        </div>
                    </div>
                    <div class="stat-footer text-white">
                        @if (dashboardData.TotalGoals > 0)
                        {
                            var percentage = (dashboardData.CompletedGoals * 100.0 / dashboardData.TotalGoals).ToString("F0");
                            <span>
                                <span style="font-size: 17px;">🏆</span>
                                @percentage% progreso
                            </span>
                        }
                        else
                        {
                            <span>
                                <span style="font-size: 17px;">🚀</span>
                                Crea una meta
                            </span>
                        }
                    </div>
                </div>
            </div>
        </div>

        <!-- Charts Row -->
        <div class="row g-4 mb-4">
            <!-- Doughnut Chart -->
            <div class="col-lg-4">
                <div class="glass-card h-100 animate-slide-up" style="animation-delay: 0.4s;">
                    <div class="card-header-glass">
                        <h5 class="mb-0 text-white fw-semibold">
                            <span style="font-size: 20px;">🧾</span>
                            Gastos por Categoría
                        </h5>
                    </div>
                    <div class="card-body-glass">
                        @if (dashboardData.CategoryExpenses.Any())
                        {
                            <div style="height: 300px; position: relative;">
                                <canvas id="doughnutChart"></canvas>
                            </div>
                        }
                        else
                        {
                            <div class="empty-state">
                                <i class="bi bi-inbox"></i>
                                <p>No hay gastos registrados</p>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <!-- Bar Chart -->
            <div class="col-lg-8">
                <div class="glass-card h-100 animate-slide-up" style="animation-delay: 0.5s;">
                    <div class="card-header-glass">
                        <div class="d-flex justify-content-between align-items-center flex-wrap gap-3">
                            <h5 class="mb-0 text-white fw-semibold">
                                <span style="font-size: 20px;">📊</span>
                                Ingresos vs Gastos
                            </h5>
                            <div class="btn-group btn-group-sm" role="group">
                                <button type="button"
                                        class="glass-btn text-white @(selectedDays == 7 ? "active" : "")"
                                        @onclick="() => ChangePeriod(7)">
                                    7 días
                                </button>
                                <button type="button"
                                        class="glass-btn text-white @(selectedDays == 30 ? "active" : "")"
                                        @onclick="() => ChangePeriod(30)">
                                    30 días
                                </button>
                            </div>
                        </div>
                    </div>
                    <div class="card-body-glass">
                        @if (chartData.Any())
                        {
                            <div style="height: 300px; position: relative;">
                                <canvas id="barChart"></canvas>
                            </div>
                        }
                        else
                        {
                            <div class="empty-state">
                                <i class="bi bi-graph-up"></i>
                                <p class="text-white">No hay transacciones en los últimos @selectedDays días</p>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

        <!-- Recent Transactions -->
        <div class="row g-4">
            <div class="col-12">
                <div class="glass-card animate-slide-up" style="animation-delay: 0.6s;">
                    <div class="card-header-glass">
                        <div class="d-flex justify-content-between align-items-center flex-wrap gap-3">
                            <h5 class="mb-0 text-white fw-semibold" style="text-align:center">
                                <span style="font-size: 32px;">💳</span>
                                Transacciones Recientes
                            </h5>
                            <a href="/transactions" class="glass-link">
                                Ver todas <i class="bi bi-arrow-right ms-1"></i>
                            </a>
                        </div>
                    </div>
                    <div class="card-body-glass">
                        @if (dashboardData.RecentTransactions.Any())
                        {
                            <div class="table-responsive">
                                <table class="table-glass mb-0">
                                    <thead>
                                        <tr>
                                            <th class="text-white">Categoría</th>
                                            <th class="text-white">Monto</th>
                                            <th class="text-white">Nota</th>
                                            <th class="text-white">Fecha</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var transaction in dashboardData.RecentTransactions.Take(5))
                                        {
                                            <tr class="transaction-row">
                                                <td>
                                                    <div class="d-flex align-items-center gap-2">
                                                        <span style="font-size: 1.5rem;">@transaction.CategoryIcon</span>
                                                        <span class="text-white fw-semibold">@transaction.CategoryName</span>
                                                    </div>
                                                </td>
                                                <td>
                                                    <span class="fw-bold @(GetCategoryType(transaction.CategoryId) == TransactionType.Income ? "text-success" : "text-danger")">
                                                        @transaction.FormattedAmount
                                                    </span>
                                                </td>
                                                <td>
                                                    <span class="text-white">@transaction.Note</span>
                                                </td>
                                                <td>
                                                    <small class="text-white">@transaction.Date.ToString("dd/MM/yyyy")</small>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                        else
                        {
                            <div class="empty-state">
                                <i class="bi bi-receipt"></i>
                                <p class="mb-3 text-white">No hay transacciones recientes</p>
                                <a href="/transactions" class="glass-button">
                                    <span style="font-size: 17px;">💳</span>Crear Transacción
                                </a>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</div>
@code {
    private bool isLoading = true;
    private string userId = string.Empty;
    private int selectedDays = 7;
    private DashboardDto dashboardData = new();
    private List<CategoryDto> categories = new();
    private Dictionary<string, DayData> chartData = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated ?? false)
        {
            userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value ?? string.Empty;
            await LoadDashboardData();
        }

        isLoading = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !isLoading)
        {
            await RenderCharts();
        }
    }

    private async Task ChangePeriod(int days)
    {
        selectedDays = days;
        await LoadDashboardData();
        await RenderCharts();
    }

    private async Task LoadDashboardData()
    {
        try
        {
            var endDate = DateTime.Now;
            var startDate = endDate.AddDays(-selectedDays);

            // Cargar datos del período seleccionado
            dashboardData.TotalIncome = await TransactionService.GetTotalIncomeAsync(userId, startDate, endDate);
            dashboardData.TotalExpense = await TransactionService.GetTotalExpenseAsync(userId, startDate, endDate);
            dashboardData.Balance = dashboardData.TotalIncome - dashboardData.TotalExpense;
            dashboardData.RecentTransactions = await TransactionService.GetRecentAsync(userId, 10);

            categories = await CategoryService.GetAllAsync(userId);

            // Calcular gastos por categoría (últimos 30 días para el dona)
            var thirtyDaysAgo = DateTime.Now.AddDays(-30);
            var allTransactions = await TransactionService.GetByDateRangeAsync(userId, thirtyDaysAgo, DateTime.Now);

            var expenseCategories = categories.Where(c => c.Type == TransactionType.Expense).ToList();
            dashboardData.CategoryExpenses.Clear();

            foreach (var category in expenseCategories)
            {
                // Convierte a double para la suma y luego a decimal
                var amount = (decimal)allTransactions
                    .Where(t => t.CategoryId == category.CategoryId)
                    .Sum(t => (double)t.Amount);

                if (amount > 0)
                {
                    dashboardData.CategoryExpenses.Add(new CategoryExpenseDto
                    {
                        CategoryName = category.Title,
                        CategoryIcon = category.Icon,
                        Amount = amount
                    });
                }
            }

            // Calcular porcentajes
            var totalExpenses = dashboardData.CategoryExpenses.Sum(c => c.Amount);
            if (totalExpenses > 0)
            {
                foreach (var cat in dashboardData.CategoryExpenses)
                {
                    cat.Percentage = (cat.Amount / totalExpenses) * 100;
                }
            }

            // Cargar datos de metas
            var allGoals = await GoalService.GetAllAsync(userId);
            dashboardData.TotalGoals = allGoals.Count;
            dashboardData.CompletedGoals = await GoalService.GetCompletedGoalsCountAsync(userId);

            // Calcular datos del gráfico según el período seleccionado
            await CalculateChartData();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading dashboard: {ex.Message}");
        }
    }

    private async Task CalculateChartData()
    {
        var endDate = DateTime.Now.Date;
        var startDate = endDate.AddDays(-(selectedDays - 1));

        var transactions = await TransactionService.GetByDateRangeAsync(userId, startDate, endDate);
        chartData.Clear();

        // Agrupar por días o semanas según el período
        if (selectedDays == 7)
        {
            // Mostrar día por día
            for (int i = 0; i < selectedDays; i++)
            {
                var date = startDate.AddDays(i);
                var dayLabel = date.ToString("ddd dd");

                var dayTransactions = transactions.Where(t => t.Date.Date == date).ToList();

                var income = dayTransactions
                    .Where(t => GetCategoryType(t.CategoryId) == TransactionType.Income)
                    .Sum(t => t.Amount);

                var expense = dayTransactions
                    .Where(t => GetCategoryType(t.CategoryId) == TransactionType.Expense)
                    .Sum(t => t.Amount);

                chartData[dayLabel] = new DayData { Income = income, Expense = expense };
            }
        }
        else // 30 días - agrupar por semanas
        {
            int weekNumber = 1;
            for (int i = 0; i < selectedDays; i += 7)
            {
                var weekStart = startDate.AddDays(i);
                var weekEnd = weekStart.AddDays(6);
                if (weekEnd > endDate) weekEnd = endDate;

                var weekLabel = $"Sem {weekNumber}";

                var weekTransactions = transactions
                    .Where(t => t.Date.Date >= weekStart && t.Date.Date <= weekEnd)
                    .ToList();

                var income = weekTransactions
                    .Where(t => GetCategoryType(t.CategoryId) == TransactionType.Income)
                    .Sum(t => t.Amount);

                var expense = weekTransactions
                    .Where(t => GetCategoryType(t.CategoryId) == TransactionType.Expense)
                    .Sum(t => t.Amount);

                chartData[weekLabel] = new DayData { Income = income, Expense = expense };
                weekNumber++;
            }
        }
    }

    private async Task RenderCharts()
    {
        try
        {
            // Gráfico de dona (gastos por categoría)
            if (dashboardData.CategoryExpenses.Any())
            {
                var labels = dashboardData.CategoryExpenses.Select(c => $"{c.CategoryIcon} {c.CategoryName}").ToArray();
                var data = dashboardData.CategoryExpenses.Select(c => (double)c.Amount).ToArray();
                var colors = GenerateColors(data.Length);

                await JSRuntime.InvokeVoidAsync("chartHelpers.createDoughnutChart",
                    "doughnutChart", labels, data, colors);
            }

            // Gráfico de barras (ingresos vs gastos)
            if (chartData.Any())
            {
                var labels = chartData.Keys.ToArray();
                var incomeData = chartData.Values.Select(d => (double)d.Income).ToArray();
                var expenseData = chartData.Values.Select(d => (double)d.Expense).ToArray();

                await JSRuntime.InvokeVoidAsync("chartHelpers.createBarChart",
                    "barChart", labels, incomeData, expenseData);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error rendering charts: {ex.Message}");
        }
    }

    private TransactionType GetCategoryType(int categoryId)
    {
        return categories.FirstOrDefault(c => c.CategoryId == categoryId)?.Type ?? TransactionType.Expense;
    }

    private string[] GenerateColors(int count)
    {
        var colors = new[]
        {
            "rgba(59, 130, 246, 0.8)",   // Azul
            "rgba(139, 92, 246, 0.8)",   // Púrpura
            "rgba(236, 72, 153, 0.8)",   // Rosa
            "rgba(251, 146, 60, 0.8)",   // Naranja
            "rgba(34, 197, 94, 0.8)",    // Verde
            "rgba(6, 182, 212, 0.8)",    // Cyan
            "rgba(245, 158, 11, 0.8)",   // Amarillo
            "rgba(239, 68, 68, 0.8)",    // Rojo
            "rgba(168, 85, 247, 0.8)",   // Violeta
            "rgba(20, 184, 166, 0.8)",   // Teal
        };

        return colors.Take(count).ToArray();
    }

    public async ValueTask DisposeAsync()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("chartHelpers.destroyChart", "doughnutChart");
            await JSRuntime.InvokeVoidAsync("chartHelpers.destroyChart", "barChart");
        }
        catch { }
    }

    private class DayData
    {
        public decimal Income { get; set; }
        public decimal Expense { get; set; }
    }
}

