@page "/dashboard"
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@using MisFinanzas.Domain.Entities
@using MisFinanzas.Domain.Enums
@using MisFinanzas.Infrastructure.Services
@using MisFinanzas.Services
@inject CategoryService CategoryService
@inject ExpenseIncomeService ExpenseIncomeService
@inject FinancialGoalService FinancialGoalService
@inject BudgetService BudgetService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@using Microsoft.JSInterop

<PageTitle>Dashboard - Mis Finanzas</PageTitle>

<div class="dashboard-container">
    @if (!isAuthorized)
    {
        <!-- Verificando autorización -->
        <div class="glass-card text-center py-5 animate-slide-up">
            <div class="spinner-border text-success" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">Verificando permisos...</span>
            </div>
            <p class="text-white-50 mt-3 mb-0">Verificando permisos...</p>
        </div>
    }
    else if (isLoading)
    {
        <div class="glass-card text-center py-5 animate-slide-up">
            <div class="spinner-border text-success" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">Cargando...</span>
            </div>
            <p class="text-white-50 mt-3 mb-0">Cargando tus datos financieros...</p>
        </div>
    }
    else
    {
        <!-- Header con efecto glass -->
        <div class="glass-card dashboard-header animate-slide-up">
            <div class="d-flex justify-content-between align-items-center flex-wrap gap-3">
                <div>
                    <h1 class="h3 mb-1 text-white fw-bold">
                        <span style="font-size: 32px;">📊</span>
                        <strong>Dashboard</strong>
                    </h1>
                    <p class="text-white mb-0">Resumen de tus finanzas</p>
                </div>
                <div class="glass-badge">
                    <span style="font-size: 17px;">📅</span>
                    <span class="text-white">Últimos @selectedDays días</span>
                </div>
            </div>
        </div>

        <!-- Summary Cards -->
        <div class="row g-4 mb-4">
            <!-- Balance Card -->
            <div class="col-xl-3 col-md-6">
                <div class="glass-card stat-card animate-slide-up h-100">
                    <div class="stat-card-body">
                        <div class="stat-icon balance-icon">
                            <span style="font-size: 32px;">💰</span>
                        </div>
                        <div class="stat-content">
                            <p class="stat-label text-white">Balance</p>
                            <h2 class="stat-value @(balance >= 0 ? "text-info" : "text-danger")">
                                @if (balance >= 0)
                                {
                                    <text>@balance.ToString("C0")</text>
                                }
                                else
                                {
                                    <text>-@Math.Abs(balance).ToString("C0")</text>
                                }
                            </h2>
                            <small class="stat-subtitle @(balance >= 0 ? "text-info" : "text-danger")">
                                <span style="font-size: 15px;">@(balance >= 0 ? "✅" : "⚠️")</span>
                                @(balance >= 0 ? "Superávit" : "Déficit")
                            </small>
                        </div>
                    </div>
                    <div class="stat-footer text-white">
                        <span style="font-size: 17px;">💲</span>
                        @if (balance >= 0)
                        {
                            <text>Situación positiva</text>
                        }
                        else
                        {
                            <text>Gastos exceden ingresos</text>
                        }
                    </div>
                </div>
            </div>

            <!-- Income Card -->
            <div class="col-xl-3 col-md-6">
                <div class="glass-card stat-card animate-slide-up h-100" style="animation-delay: 0.1s;">
                    <div class="stat-card-body">
                        <div class="stat-icon income-icon">
                            <span style="font-size: 32px;">📈</span>
                        </div>
                        <div class="stat-content">
                            <p class="stat-label text-white">Ingresos</p>
                            <h2 class="stat-value text-info">@totalIncome.ToString("C0")</h2>
                            <small class="stat-subtitle text-white">
                                <span style="font-size: 15px;">🔼</span>Entradas
                            </small>
                        </div>
                    </div>
                    <div class="stat-footer text-white">
                        <span style="font-size: 17px;">💵</span>
                        Total recibido
                    </div>
                </div>
            </div>

            <!-- Expense Card -->
            <div class="col-xl-3 col-md-6">
                <div class="glass-card stat-card animate-slide-up h-100" style="animation-delay: 0.2s;">
                    <div class="stat-card-body">
                        <div class="stat-icon expense-icon">
                            <span style="font-size: 32px;">📉</span>
                        </div>
                        <div class="stat-content">
                            <p class="stat-label text-white">Gastos</p>
                            <h2 class="stat-value text-danger">@totalExpense.ToString("C0")</h2>
                            <small class="stat-subtitle text-danger">
                                <span style="font-size: 15px;">🔽</span>Salidas
                            </small>
                        </div>
                    </div>
                    <div class="stat-footer text-white">
                        <span style="font-size: 17px;">🛒</span>
                        Total gastado
                    </div>
                </div>
            </div>

            <!-- Goals Card -->
            <div class="col-xl-3 col-md-6">
                <div class="glass-card stat-card animate-slide-up h-100" style="animation-delay: 0.3s;">
                    <div class="stat-card-body">
                        <div class="stat-icon goals-icon">
                            <span style="font-size: 32px;">🎯</span>
                        </div>
                        <div class="stat-content">
                            <p class="stat-label text-white">Metas</p>
                            <h2 class="stat-value text-info">@completedGoalsCount/@totalGoalsCount</h2>
                            <small class="stat-subtitle text-info">
                                <span style="font-size: 15px;">🚩</span>Completadas
                            </small>
                        </div>
                    </div>
                    <div class="stat-footer text-white">
                        @if (totalGoalsCount > 0)
                        {
                            var percentage = (completedGoalsCount * 100.0 / totalGoalsCount).ToString("F0");
                            <span>
                                <span style="font-size: 17px;">🏆</span>
                                @percentage% progreso
                            </span>
                        }
                        else
                        {
                            <span>
                                <span style="font-size: 17px;">🚀</span>
                                Crea una meta
                            </span>
                        }
                    </div>
                </div>
            </div>
        </div>

        <!-- Main Charts Row -->
        <div class="row g-4 mb-4">
            <!-- Bar Chart -->
            <div class="col-lg-6">
                <div class="glass-card h-100 animate-slide-up" style="animation-delay: 0.4s;">
                    <div class="card-header-glass">
                        <div class="d-flex justify-content-between align-items-center flex-wrap gap-3">
                            <h5 class="mb-0 text-white fw-semibold">
                                <span style="font-size: 20px;">📊</span>
                                Ingresos vs Gastos
                            </h5>
                            <div class="btn-group btn-group-sm" role="group">
                                <button type="button"
                                        class="glass-btn text-white @(selectedDays == 7 ? "active" : "")"
                                        @onclick="() => ChangePeriod(7)">
                                    7 días
                                </button>
                                <button type="button"
                                        class="glass-btn text-white @(selectedDays == 30 ? "active" : "")"
                                        @onclick="() => ChangePeriod(30)">
                                    30 días
                                </button>
                            </div>
                        </div>
                    </div>
                    <div class="card-body-glass">
                        @if (chartData.Any())
                        {
                            <div style="height: 350px; position: relative;">
                                <canvas id="barChart"></canvas>
                            </div>
                        }
                        else
                        {
                            <div class="empty-state">
                                <i class="bi bi-graph-up"></i>
                                <p class="text-white">No hay transacciones en los últimos @selectedDays días</p>
                            </div>
                        }
                    </div>
                </div>
            </div>
            <!-- Budget Doughnut Chart -->
            <div class="col-lg-3">
                <div class="glass-card animate-slide-up" style="animation-delay: 0.6s;">
                    <div class="card-header-glass">
                        <h5 class="mb-0 text-white fw-semibold">
                            <span style="font-size: 20px;">💰</span>
                            Prep. Gastado por Categoria
                        </h5>
                    </div>
                    <div class="card-body-glass">
                        @if (budgetData.Any())
                        {
                            <div style="height: 250px; position: relative; margin-bottom: 1rem;">
                                <canvas id="budgetChart"></canvas>
                            </div>
                            <div class="budget-legend">
                                @foreach (var item in budgetData)
                                {
                                    <div class="legend-item @GetBudgetStatusClass(item.PercentageUsed)">
                                        <span class="legend-color"></span>
                                        <span class="legend-label">@item.CategoryName</span>
                                        <span class="legend-value">@item.PercentageUsed.ToString("F0")%</span>
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <div class="empty-state-small">
                                <p class="text-white">No tienes presupuestos activos</p>
                            </div>
                        }
                    </div>
                </div>
            </div>
            <!-- Expenses Distribution Doughnut Chart -->
            <div class="col-lg-3">
                <div class="glass-card animate-slide-up" style="animation-delay: 0.8s;">
                    <div class="card-header-glass">
                        <h5 class="mb-0 text-white fw-semibold">
                            <span style="font-size: 20px;">🧾</span>
                            Gastos por Categorias
                        </h5>
                    </div>
                    <div class="card-body-glass">
                        @if (expensesByCategoryData.Any())
                        {
                            <div style="height: 350px; position: relative; margin-bottom:1rem;">
                                <canvas id="expensesChart"></canvas>
                            </div>
                        }
                        else
                        {
                            <div class="empty-state-small">
                                <p class="text-white">No hay gastos en el período seleccionado</p>
                            </div>
                        }
                    </div>
                </div>
            </div>

        </div>

        <!-- Secondary Row: Goals + Alerts -->
        <div class="row g-4 mb-4">
            <!--  Goals -->
            <div class="col-lg-6">
                <div class="glass-card h-100 animate-slide-up" style="animation-delay: 0.5s;">
                    <div class="card-header-glass">
                        <div class="d-flex justify-content-between align-items-center">
                            <h5 class="mb-0 text-white fw-semibold">
                                <span style="font-size: 20px;">🎯</span>
                                Metas Activas
                            </h5>
                            <a href="/goals" class="glass-link-small">Ver todas →</a>
                        </div>
                    </div>
                    <div class="card-body-glass">
                        @if (topGoals.Any())
                        {
                            @foreach (var goal in topGoals)
                            {
                                var percentage = goal.TargetAmount > 0 ? (goal.CurrentAmount / goal.TargetAmount) * 100 : 0;
                                var daysRemaining = (goal.TargetDate - DateTime.Now).Days;

                                <div class="goal-item">
                                    <div class="goal-header">
                                        <span class="goal-name">@goal.Title</span>
                                        <span class="goal-percentage">@percentage.ToString("F0")%</span>
                                    </div>
                                    <div class="progress-bar-container">
                                        <div class="progress-bar-fill" style="width: @percentage%"></div>
                                    </div>
                                    <div class="goal-footer">
                                        <span class="text-info">@goal.CurrentAmount.ToString("C0") / @goal.TargetAmount.ToString("C0")</span>
                                        @if (goal.Status != MisFinanzas.Domain.Enums.GoalStatus.Completed)
                                        {
                                            <span class="days-remaining text-white">@daysRemaining días</span>
                                        }
                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="empty-state-small">
                                <p class="text-white">No tienes metas activas</p>
                                <a href="/goals" class="glass-button-small">Crear Meta</a>
                            </div>
                        }
                    </div>
                </div>
            </div>
            <!-- Alerts Widget -->
            <div class="col-lg-6">
                <div class="glass-card animate-slide-up" style="animation-delay: 0.7s;">
                    <div class="card-header-glass">
                        <h5 class="mb-0 text-white fw-semibold">
                            <span style="font-size: 20px;">⚠️</span>
                            Control Presupuestos
                        </h5>
                    </div>
                    <div class="card-body-glass">
                        @if (alerts.Any())
                        {
                            @foreach (var alert in alerts)
                            {
                                <div class="alert-item @alert.Type">
                                    <div class="alert-icon">@alert.Icon</div>
                                    <div class="alert-content">
                                        <strong>@alert.Title</strong>
                                        <p class="text-white">@alert.Message</p>
                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="empty-state-small success">
                                <span style="font-size: 2rem;">✅</span>
                                <p class="text-white">¡Todo bajo control!</p>
                                <small class="text-white">No hay alertas</small>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

        <!-- Recent Transactions -->
        <div class="row g-4">
            <div class="col-12">
                <div class="glass-card">
                    <div class="card-header-glass">
                        <div class="d-flex justify-content-between align-items-center flex-wrap gap-3">
                            <h5 class="mb-0 text-white fw-semibold">
                                <span style="font-size: 32px;">💳</span>
                                Historial
                            </h5>
                            <a href="/expenses-incomes" class="glass-link">
                                Ver todas <i class="bi bi-arrow-right ms-1"></i>
                            </a>
                        </div>
                    </div>
                    <div class="card-body-glass">
                        @if (recentTransactions.Any())
                        {
                            <div class="table-responsive">
                                <table class="table-glass mb-0">
                                    <thead>
                                        <tr>
                                            <th class="text-white">Categoría</th>
                                            <th class="text-white">Monto</th>
                                            <th class="text-white">Descripción</th>
                                            <th class="text-white">Fecha</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var transaction in recentTransactions.Take(5))
                                        {
                                            <tr class="transaction-row">
                                                <td>
                                                    <div class="d-flex align-items-center gap-2">
                                                        <span style="font-size: 1.5rem;">@transaction.CategoryIcon</span>
                                                        <span class="text-white fw-semibold">@transaction.CategoryTitle</span>
                                                    </div>
                                                </td>
                                                <td>
                                                    <span class="fw-bold @(transaction.Type == TransactionType.Income ? "text-success" : "text-danger")">
                                                        @(transaction.Type == TransactionType.Income ? "+" : "-")@transaction.Amount.ToString("C0")
                                                    </span>
                                                </td>
                                                <td>
                                                    <span class="text-white">@transaction.Description</span>
                                                </td>
                                                <td>
                                                    <small class="text-white">@transaction.Date.ToString("dd/MM/yyyy")</small>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                        else
                        {
                            <div class="empty-state">
                                <i class="bi bi-receipt"></i>
                                <p class="mb-3 text-white">No Hay Registros recientes</p>
                                <a href="/expenses-incomes" class="glass-button">
                                    Registrar Gasto/Ingreso
                                </a>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    // ===== VARIABLES DE ESTADO =====
    private bool isAuthorized = false;
    private bool isLoading = true;
    private string? currentUserId;
    private int selectedDays = 7;

    // Datos principales
    private List<MisFinanzas.Domain.DTOs.CategoryDto> categories = new();
    private List<MisFinanzas.Domain.DTOs.ExpenseIncomeDto> allTransactions = new();
    private List<MisFinanzas.Domain.DTOs.ExpenseIncomeDto> recentTransactions = new();
    private List<MisFinanzas.Domain.DTOs.BudgetDto> budgets = new();
    private List<MisFinanzas.Domain.DTOs.FinancialGoalDto> allGoals = new();
    private List<MisFinanzas.Domain.DTOs.FinancialGoalDto> topGoals = new();

    // Resúmenes
    private decimal balance = 0;
    private decimal totalIncome = 0;
    private decimal totalExpense = 0;
    private int totalGoalsCount = 0;
    private int completedGoalsCount = 0;

    // Datos para gráficos
    private Dictionary<string, DayData> chartData = new();
    private List<BudgetData> budgetData = new();
    private List<CategoryExpenseData> expensesByCategoryData = new();
    private List<AlertItem> alerts = new();

    // ===== CICLO DE VIDA DEL COMPONENTE =====

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await CheckAuthorization();

            if (isAuthorized)
            {
                await LoadDashboardData();
            }

            StateHasChanged();
        }
    }

    private async Task CheckAuthorization()
    {
        try
        {
            Console.WriteLine("📊 Dashboard: Verificando autorización...");

            // Obtener userId desde sessionStorage
            currentUserId = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "userId");

            if (string.IsNullOrEmpty(currentUserId))
            {
                Console.WriteLine("❌ Dashboard: No se encontró userId, redirigiendo a login...");
                await JSRuntime.InvokeVoidAsync("eval", "window.location.href = '/login'");
                return;
            }

            Console.WriteLine($"✅ Dashboard: Usuario autorizado - ID: {currentUserId}");
            isAuthorized = true;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Dashboard: Error en autorización: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("eval", "window.location.href = '/login'");
        }
    }

    private async Task LoadDashboardData()
    {
        try
        {
            isLoading = true;
            Console.WriteLine("📊 Dashboard: Iniciando carga de datos...");

            if (string.IsNullOrEmpty(currentUserId))
            {
                Console.WriteLine("❌ Dashboard: UserId es null o vacío");
                isLoading = false;
                return;
            }

            var endDate = DateTime.Now;
            var startDate = endDate.AddDays(-selectedDays);

            // Cargar datos básicos del período seleccionado
            var periodTransactions = await ExpenseIncomeService.GetByUserAndDateRangeAsync(currentUserId, startDate, endDate);

            totalIncome = periodTransactions
                .Where(t => t.Type == TransactionType.Income)
                .Sum(t => t.Amount);

            totalExpense = periodTransactions
                .Where(t => t.Type == TransactionType.Expense)
                .Sum(t => t.Amount);

            balance = totalIncome - totalExpense;

            // Cargar transacciones recientes
            recentTransactions = await ExpenseIncomeService.GetRecentTransactionsAsync(currentUserId, 10);

            // Cargar categorías
            categories = await CategoryService.GetAllByUserAsync(currentUserId);
            Console.WriteLine($"✅ Categorías cargadas: {categories.Count}");

            // Cargar todas las transacciones para gráficos
            allTransactions = await ExpenseIncomeService.GetAllByUserAsync(currentUserId);
            Console.WriteLine($"✅ Transacciones cargadas: {allTransactions.Count}");

            // Cargar datos de metas
            allGoals = await FinancialGoalService.GetAllByUserAsync(currentUserId);
            totalGoalsCount = allGoals.Count;
            completedGoalsCount = await FinancialGoalService.GetCompletedGoalsCountAsync(currentUserId);
            Console.WriteLine($"✅ Metas cargadas: {allGoals.Count}");

            // Preparar top metas activas
            PrepareTopGoals();

            // Calcular datos del gráfico de barras
            await CalculateChartData();

            // Preparar datos de presupuestos
            await PrepareBudgetData();

            // Preparar datos de gastos por categoría
            await PrepareExpensesByCategoryData();

            // Generar alertas
            GenerateAlerts();

            isLoading = false;
            StateHasChanged();

            // Renderizar gráficos después de actualizar UI
            await Task.Delay(100);
            await RenderCharts();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ ERROR en LoadDashboardData: {ex.Message}");
            Console.WriteLine($"   Stack: {ex.StackTrace}");
            isLoading = false;
        }
    }

    private async Task ChangePeriod(int days)
    {
        selectedDays = days;
        await LoadDashboardData();
        await RenderCharts();
    }

    private async Task CalculateChartData()
    {
        var endDate = DateTime.Now.Date;
        var startDate = endDate.AddDays(-(selectedDays - 1));

        var transactions = allTransactions
            .Where(t => t.Date.Date >= startDate && t.Date.Date <= endDate)
            .ToList();

        chartData.Clear();

        if (selectedDays == 7)
        {
            for (int i = 0; i < selectedDays; i++)
            {
                var date = startDate.AddDays(i);
                var dayLabel = date.ToString("ddd dd");

                var dayTransactions = transactions.Where(t => t.Date.Date == date).ToList();

                var income = dayTransactions
                    .Where(t => t.Type == TransactionType.Income)
                    .Sum(t => t.Amount);

                var expense = dayTransactions
                    .Where(t => t.Type == TransactionType.Expense)
                    .Sum(t => t.Amount);

                chartData[dayLabel] = new DayData { Income = income, Expense = expense };
            }
        }
        else
        {
            int weekNumber = 1;
            for (int i = 0; i < selectedDays; i += 7)
            {
                var weekStart = startDate.AddDays(i);
                var weekEnd = weekStart.AddDays(6);
                if (weekEnd > endDate) weekEnd = endDate;

                var weekLabel = $"Sem {weekNumber}";

                var weekTransactions = transactions
                    .Where(t => t.Date.Date >= weekStart && t.Date.Date <= weekEnd)
                    .ToList();

                var income = weekTransactions
                    .Where(t => t.Type == TransactionType.Income)
                    .Sum(t => t.Amount);

                var expense = weekTransactions
                    .Where(t => t.Type == TransactionType.Expense)
                    .Sum(t => t.Amount);

                chartData[weekLabel] = new DayData { Income = income, Expense = expense };
                weekNumber++;
            }
        }
    }

    private async Task PrepareBudgetData()
    {
        var now = DateTime.Now;
        budgetData.Clear();

        // Usar el método correcto del servicio que ya calcula SpentAmount dinámicamente
        budgets = await BudgetService.GetByUserAndPeriodAsync(currentUserId!, now.Month, now.Year);

        foreach (var budget in budgets)
        {
            var percentage = budget.AssignedAmount > 0 ? (budget.SpentAmount / budget.AssignedAmount) * 100 : 0;

            budgetData.Add(new BudgetData
            {
                CategoryName = budget.CategoryTitle ?? "Sin categoría",
                CategoryIcon = budget.CategoryIcon ?? "📁",
                BudgetAmount = budget.AssignedAmount,
                SpentAmount = budget.SpentAmount,
                PercentageUsed = percentage
            });
        }
    }

    private async Task PrepareExpensesByCategoryData()
    {
        expensesByCategoryData.Clear();

        // Obtener gastos del período seleccionado
        var endDate = DateTime.Now;
        var startDate = endDate.AddDays(-selectedDays);

        var periodTransactions = await ExpenseIncomeService.GetByUserAndDateRangeAsync(currentUserId!, startDate, endDate);

        // Filtrar solo gastos
        var expenses = periodTransactions
            .Where(t => t.Type == TransactionType.Expense)
            .ToList();

        if (!expenses.Any())
            return;

        // Agrupar por categoría
        var groupedByCategory = expenses
            .GroupBy(e => new { e.CategoryId, e.CategoryTitle, e.CategoryIcon })
            .Select(g => new
            {
                CategoryId = g.Key.CategoryId,
                CategoryName = g.Key.CategoryTitle ?? "Sin categoría",
                CategoryIcon = g.Key.CategoryIcon ?? "📁",
                TotalExpense = g.Sum(e => e.Amount)
            })
            .OrderByDescending(x => x.TotalExpense)
            .ToList();

        // Colores predefinidos para las categorías
        var colors = new[]
        {
            "#f44336", "#e91e63", "#9c27b0", "#673ab7",
            "#3f51b5", "#2196f3", "#03a9f4", "#00bcd4",
            "#009688", "#4caf50", "#8bc34a", "#cddc39",
            "#ffeb3b", "#ffc107", "#ff9800", "#ff5722"
        };

        int colorIndex = 0;
        foreach (var item in groupedByCategory)
        {
            expensesByCategoryData.Add(new CategoryExpenseData
            {
                CategoryName = item.CategoryName,
                CategoryIcon = item.CategoryIcon,
                TotalExpense = item.TotalExpense,
                Color = colors[colorIndex % colors.Length]
            });
            colorIndex++;
        }
    }

    private void PrepareTopGoals()
    {
        topGoals = allGoals
            .Where(g => g.Status != MisFinanzas.Domain.Enums.GoalStatus.Completed)
            .OrderByDescending(g => g.TargetAmount > 0 ? (g.CurrentAmount / g.TargetAmount) : 0)
            .Take(5)
            .ToList();
    }

    private void GenerateAlerts()
    {
        alerts = new List<AlertItem>();

        var exceededBudgets = budgetData.Where(b => b.PercentageUsed >= 100).ToList();
        foreach (var budget in exceededBudgets)
        {
            alerts.Add(new AlertItem
            {
                Type = "danger",
                Icon = "🔴",
                Title = $"{budget.CategoryName} excedido",
                Message = $"Has gastado {budget.SpentAmount:C} de {budget.BudgetAmount:C}"
            });
        }

        var warningBudgets = budgetData.Where(b => b.PercentageUsed >= 80 && b.PercentageUsed < 100).ToList();
        foreach (var budget in warningBudgets)
        {
            alerts.Add(new AlertItem
            {
                Type = "warning",
                Icon = "🟡",
                Title = $"{budget.CategoryName} cerca del límite",
                Message = $"Has gastado {budget.PercentageUsed:F0}% del presupuesto"
            });
        }

        // Alertas de metas próximas a vencer
        var urgentGoals = allGoals
            .Where(g => g.Status != MisFinanzas.Domain.Enums.GoalStatus.Completed
                && (g.TargetDate - DateTime.Now).Days <= 30
                && (g.TargetDate - DateTime.Now).Days > 0)
            .ToList();

        foreach (var goal in urgentGoals)
        {
            var daysLeft = (goal.TargetDate - DateTime.Now).Days;
            alerts.Add(new AlertItem
            {
                Type = "info",
                Icon = "🎯",
                Title = $"Meta '{goal.Title}' próxima",
                Message = $"Vence en {daysLeft} días"
            });
        }

        alerts = alerts.Take(5).ToList();
    }

    private async Task RenderCharts()
    {
        try
        {
            var chartExists = await JSRuntime.InvokeAsync<bool>("eval",
                "typeof chartHelpers !== 'undefined'");

            if (!chartExists)
            {
                Console.WriteLine("⚠️ chartHelpers no está disponible aún");
                return;
            }

            // Gráfico de barras (ingresos vs gastos)
            if (chartData.Any())
            {
                var labels = chartData.Keys.ToArray();
                var incomeData = chartData.Values.Select(d => (double)d.Income).ToArray();
                var expenseData = chartData.Values.Select(d => (double)d.Expense).ToArray();

                await JSRuntime.InvokeVoidAsync("chartHelpers.createBarChart",
                    "barChart", labels, incomeData, expenseData);
            }

            // Gráfico de presupuestos
            if (budgetData.Any())
            {
                var labels = budgetData.Select(b => b.CategoryName).ToArray();
                var values = budgetData.Select(b => b.PercentageUsed).ToArray();
                var colors = budgetData.Select(b => GetBudgetColor(b.PercentageUsed)).ToArray();

                await JSRuntime.InvokeVoidAsync("chartHelpers.createBudgetChart",
                    "budgetChart", labels, values, colors);
            }

            // Gráfico de distribución de gastos por categoría
            if (expensesByCategoryData.Any())
            {
                var labels = expensesByCategoryData.Select(e => e.CategoryName).ToArray();
                var values = expensesByCategoryData.Select(e => (double)e.TotalExpense).ToArray();
                var colors = expensesByCategoryData.Select(e => e.Color).ToArray();

                await JSRuntime.InvokeVoidAsync("chartHelpers.createDoughnutChart",
                    "expensesChart", labels, values, colors);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Error rendering charts: {ex.Message}");
        }
    }

    private string GetBudgetStatusClass(decimal percentage)
    {
        if (percentage >= 100) return "status-exceeded";
        if (percentage >= 80) return "status-warning";
        return "status-ok";
    }

    private string GetBudgetColor(decimal percentage)
    {
        if (percentage >= 100) return "#f44336";
        if (percentage >= 80) return "#ffc107";
        return "#4CAF50";
    }

    public async ValueTask DisposeAsync()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("chartHelpers.destroyChart", "barChart");
            await JSRuntime.InvokeVoidAsync("chartHelpers.destroyChart", "budgetChart");
            await JSRuntime.InvokeVoidAsync("chartHelpers.destroyChart", "expensesChart");
        }
        catch { }
    }

    // ===== CLASES AUXILIARES =====

    private class DayData
    {
        public decimal Income { get; set; }
        public decimal Expense { get; set; }
    }

    public class BudgetData
    {
        public string CategoryName { get; set; } = "";
        public string CategoryIcon { get; set; } = "";
        public decimal BudgetAmount { get; set; }
        public decimal SpentAmount { get; set; }
        public decimal PercentageUsed { get; set; }
    }

    public class CategoryExpenseData
    {
        public string CategoryName { get; set; } = "";
        public string CategoryIcon { get; set; } = "";
        public decimal TotalExpense { get; set; }
        public string Color { get; set; } = "";
    }

    public class AlertItem
    {
        public string Type { get; set; } = "";
        public string Icon { get; set; } = "";
        public string Title { get; set; } = "";
        public string Message { get; set; } = "";
    }
}