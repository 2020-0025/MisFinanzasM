@page "/goals"
@using MisFinanzas.Domain.DTOs
@using MisFinanzas.Domain.Enums
@using MisFinanzas.Infrastructure.Interfaces
@using MisFinanzas.Components.Shared
@using System.Security.Claims
@inject IFinancialGoalService GoalService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime
@attribute [Authorize]
@rendermode InteractiveServer

<PageTitle>Metas Financieras - Mis Finanzas</PageTitle>

<div class="goals-container">
    <!-- Header con efecto glass -->
    <div class="glass-card goals-header animate-slide-up">
        <div class="d-flex justify-content-between align-items-center flex-wrap gap-3">
            <div>
                <h1 class="h3 mb-1 text-white fw-bold">
                    <span style="font-size: 32px;">🎯</span>
                    <strong>Metas Financieras</strong>
                </h1>
                <p class="text-white mb-0">Define tus metas</p>
            </div>
            <button class="glass-button-action text-white" @onclick="OpenCreateModal">
                <span style="font-size: 17px;">➕</span>Nueva Meta
            </button>
        </div>
    </div>
    
    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Cargando...</span>
            </div>
        </div>
    }
    else if (!goals.Any())
    {
        <div class="glass-card border-0 shadow-sm rounded-4">
            <div class="card-body text-center py-5">
                <span style="font-size: 25px;">🚩</span>
                <h5 class="mt-3 text-white">No hay metas definidas</h5>
                <p class="text-white">Establece tus objetivos financieros y haz seguimiento de tu progreso</p>
                <button class="glass-button-action text-white mt-3" @onclick="OpenCreateModal">
                    <span style="font-size: 17px;">➕</span>Crear Mi Primera Meta
                </button>
            </div>
        </div>
    }
    else
    {
        <!-- Estadísticas rápidas -->
        <div class="row g-4 mb-4">
            <!-- Metas totales -->
            <div class="col-md-3">
                <div class="glass-card border-0 shadow-sm rounded-4 card-hover">
                    <div class="card-body">
                        <div class="d-flex align-items-center gap-3">
                            <div class="bg-primary bg-opacity-10 p-3 rounded-3">
                                <span style="font-size: 25px;">🚩</span>
                            </div>
                            <div class="w-100 text-white">
                                <p class="mb-1">Total Metas</p>
                                <h3 class="mb-0 fw-bold fs-5">@goals.Count</h3>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <!-- Metas Completadas -->
            <div class="col-md-3">
                <div class="glass-card border-0 shadow-sm rounded-4 card-hover">
                    <div class="card-body">
                        <div class="d-flex align-items-center gap-3">
                            <div class="bg-success bg-opacity-10 p-3 rounded-3">
                                <span style="font-size: 25px;">✅</span>
                            </div>
                            <div class="w-100 text-white">
                                <p class="mb-1">Completadas</p>
                                <h3 class="mb-0 fw-bold text-success fs-5">@goals.Count(g => g.IsCompleted)</h3>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <!-- Metas en progreso -->
            <div class="col-md-3">
                <div class="glass-card border-0 shadow-sm rounded-4 card-hover">
                    <div class="card-body">
                        <div class="d-flex align-items-center gap-3">
                            <div class="bg-warning bg-opacity-10 p-3 rounded-3">
                                <span style="font-size: 25px;">⏳</span>
                            </div>
                            <div class="w-100 text-white">
                                <p class="mb-1">En Progreso</p>
                                <h3 class="mb-0 fw-bold text-warning fs-5">@goals.Count(g => g.Status == GoalStatus.InProgress)</h3>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <!-- Metas objetivo -->
            <div class="col-md-3">
                <div class="glass-card border-0 shadow-sm rounded-4 card-hover">
                    <div class="card-body">
                        <div class="d-flex align-items-center gap-3">
                            <div class="bg-info bg-opacity-10 p-3 rounded-3">
                                <span style="font-size: 25px;">🎯</span>
                            </div>
                            <div class="w-100 text-white">
                                <p class="mb-1">Total Objetivo</p>
                                <h3 class="mb-0 fw-bold text-info fs-5">@goals.Sum(g => g.TargetAmount).ToString("C0")</h3>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Lista de metas -->
        <div class="row g-4">
            @foreach (var goal in goals.OrderBy(g => g.IsCompleted).ThenBy(g => g.TargetDate))
            {
                <div class="col-md-6 col-lg-4">
                    <div class="glass-card border-0 shadow-sm rounded-4 h-100 goal-card @(goal.IsCompleted ? "goal-completed" : goal.IsOverdue ? "goal-overdue" : "")">
                        <div class="card-body">
                            <!-- Header con icono y estado -->
                            <div class="d-flex justify-content-between align-items-start mb-3">
                                <div class="d-flex align-items-center gap-2">
                                    <span class="goal-icon">@goal.Icon</span>
                                    <div class="text-white">
                                        <h5 class="mb-0 fw-bold">@goal.Title</h5>
                                        @if (!string.IsNullOrEmpty(goal.Description))
                                        {
                                            <small>@goal.Description</small>
                                        }
                                    </div>
                                </div>
                                <div class="dropdown">
                                    <button class="btn btn-sm btn-link text-white dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                        <span style="font-size: 13px;">🔸🔸🔸</span>
                                    </button>
                                    <ul class="glass-card dropdown-menu dropdown-menu-end" data-bs-auto-close="outside">
                                        <li>
                                            <button class="dropdown-item text-warning" @onclick="() => OpenEditModal(goal)">
                                                <span style="font-size: 13px;">📝</span>Editar
                                            </button>
                                        </li>
                                        <li>
                                            <button class="dropdown-item text-success" @onclick="() => OpenProgressModal(goal)">
                                                <span style="font-size: 13px;">➕</span>Agregar Progreso
                                            </button>
                                        </li>
                                        <li><hr class="dropdown-divider"></li>
                                        <li>
                                            <button class="dropdown-item text-danger" @onclick="() => DeleteGoal(goal.GoalId)">
                                                <i class="bi bi-trash me-2"></i>Eliminar
                                            </button>
                                        </li>
                                    </ul>
                                </div>
                            </div>

                            <!-- Montos -->
                            <div class="mb-3">
                                <div class="d-flex justify-content-between mb-2 text-white">
                                    <span>Progreso</span>
                                    <span class="fw-bold">@goal.ProgressPercentage.ToString("F1")%</span>
                                </div>
                                <div class="progress" style="height: 12px;">
                                    <div class="progress-bar @GetProgressBarColor(goal)"
                                         role="progressbar"
                                         style="width: @goal.ProgressPercentage%"
                                         aria-valuenow="@goal.ProgressPercentage"
                                         aria-valuemin="0"
                                         aria-valuemax="100">
                                    </div>
                                </div>
                                <div class="d-flex justify-content-between mt-2 text-white">
                                    <small>@goal.CurrentAmount.ToString("C2")</small>
                                    <small>@goal.TargetAmount.ToString("C2")</small>
                                </div>
                            </div>

                            <!-- Estado y días restantes -->
                            <div class="d-flex justify-content-between align-items-center">
                                <div>
                                    @if (goal.IsCompleted)
                                    {
                                        <span class="badge bg-success-subtle text-success rounded-pill px-3 py-2">
                                            <span style="font-size: 13px;">🏆</span>Completada
                                        </span>
                                    }
                                    else if (goal.IsOverdue)
                                    {
                                        <span class="badge bg-danger-subtle text-danger rounded-pill px-3 py-2">
                                            <span style="font-size: 13px;">❌</span> Vencida
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-primary-subtle text-primary rounded-pill px-3 py-2">
                                            <span style="font-size: 13px;">🔁</span> En progreso
                                        </span>
                                    }
                                </div>
                                <small>
                                    @if (goal.DaysRemaining > 0)
                                    {
                                        <span style="font-size: 13px;">📅</span>
                                        <span class="text-white">@goal.DaysRemaining días</span>
                                    }
                                    else if (!goal.IsCompleted)
                                    {
                                       @*  <i class="bi bi-exclamation-triangle-fill me-1"></i>
                                        <span class="text-danger">Vencida</span> *@
                                    }
                                    else
                                    {
                                        
                                        @* <i class="bi bi-check-circle-fill me-1"></i>
                                        <span class="text-success">¡Lograda!</span> *@
                                    }
                                </small>
                            </div>

                            <!-- Falta por alcanzar -->
                            @if (!goal.IsCompleted && goal.RemainingAmount > 0)
                            {
                                <div class="mt-3 pt-3 border-top">
                                    <small class="text-white d-block mb-1">Falta por alcanzar</small>
                                    <h6 class="mb-0 fw-bold text-primary">@goal.RemainingAmount.ToString("C2")</h6>
                                </div>
                            }
                        </div>

                        <!-- Footer con fecha objetivo -->
                        <div class="card-footer border-0 py-2">
                            <small class="text-white">
                                <i class="bi bi-calendar-event me-1"></i>
                                Meta: @goal.TargetDate.ToString("dd/MM/yyyy")
                            </small>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

<!-- Modal Crear/Editar Meta -->
@if (showModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-dialog-centered modal-lg">
            <div class=" glass-card  modal-content rounded-4 shadow">
                <div class="modal-header border-0 pb-0">
                    <h5 class="modal-title fw-bold">
                        @(isEditMode ? "Editar Meta" : "Nueva Meta Financiera")
                    </h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class=" modal-body pt-2">
                    <EditForm Model="currentGoal" OnValidSubmit="SaveGoal">
                        <DataAnnotationsValidator />

                        <div class="row g-3">
                            <div class="col-md-6">
                                <label class="form-label fw-semibold text-white">Título</label>
                                <InputText class="form-control" @bind-Value="currentGoal.Title"
                                           placeholder="Ej: Vacaciones, Casa nueva" />
                                <ValidationMessage For="@(() => currentGoal.Title)" class="text-danger small" />
                            </div>

                            <div class="col-md-6 text-white">
                                <!-- Selector de iconos -->
                                <IconSelector Label="Icono"
                                              @bind-SelectedIcon="currentGoal.Icon" />
                                <ValidationMessage For="@(() => currentGoal.Icon)" class="text-danger small" />
                            </div>

                            <div class="col-12">
                                <label class="form-label fw-semibold text-white">Descripción (Opcional)</label>
                                <InputText class="form-control" @bind-Value="currentGoal.Description"
                                           placeholder="Describe tu meta..." />
                                <ValidationMessage For="@(() => currentGoal.Description)" class="text-danger small" />
                            </div>

                            <div class="col-md-6">
                                <label class="form-label fw-semibold text-white">Monto Objetivo (RD$)</label>
                                <InputNumber class="form-control" @bind-Value="currentGoal.TargetAmount"
                                             placeholder="0.00" step="100" />
                                <ValidationMessage For="@(() => currentGoal.TargetAmount)" class="text-danger small" />
                            </div>

                            <div class="col-md-6">
                                <label class="form-label fw-semibold text-white">Monto Actual (RD$)</label>
                                <InputNumber class="form-control" @bind-Value="currentGoal.CurrentAmount"
                                             placeholder="0.00" step="100" />
                                <ValidationMessage For="@(() => currentGoal.CurrentAmount)" class="text-danger small" />
                            </div>

                            <div class="col-md-6">
                                <label class="form-label fw-semibold text-white">Fecha de Inicio</label>
                                <InputDate class="form-control" @bind-Value="currentGoal.StartDate" />
                                <ValidationMessage For="@(() => currentGoal.StartDate)" class="text-danger small" />
                            </div>

                            <div class="col-md-6">
                                <label class="form-label fw-semibold text-white">Fecha Objetivo</label>
                                <InputDate class="form-control" @bind-Value="currentGoal.TargetDate" />
                                <ValidationMessage For="@(() => currentGoal.TargetDate)" class="text-danger small" />
                            </div>

                            <div class="col-12" style="gap:5rem">
                                <label class="form-label fw-semibold text-white" >Estado:</label>
                                <InputSelect class=" glass-card form-control-glass text-white" @bind-Value="currentGoal.Status">
                                    <option value="@GoalStatus.InProgress">En Progreso</option>
                                    <option value="@GoalStatus.Completed">Completada</option>
                                    <option value="@GoalStatus.Cancelled">Cancelada</option>
                                </InputSelect>
                                <ValidationMessage For="@(() => currentGoal.Status)" class="text-danger small" />
                            </div>
                        </div>

                        <div class="d-flex gap-2 justify-content-end mt-4">
                            <button type="button" class="glass-button-secondary text-white" @onclick="CloseModal">
                                Cancelar
                            </button>
                            <button type="submit" class="glass-button-action text-white" disabled="@isSaving">
                                @if (isSaving)
                                {
                                    <span class="spinner-border spinner-border-sm me-2"></span>
                                }
                                @(isEditMode ? "Actualizar" : "Crear")
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

<!-- Modal Agregar Progreso -->
@if (showProgressModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-dialog-centered">
            <div class="glass-card modal-content rounded-4 shadow">
                <div class="modal-header border-0 pb-0">
                    <h5 class="modal-title fw-bold text-white">
                        <span class="fs-2 me-2">@currentGoal.Icon</span>
                        Agregar Progreso
                    </h5>
                    <button type="button" class="btn-close text-white" @onclick="CloseProgressModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-4">
                        <h6 class="fw-bold text-white">@currentGoal.Title</h6>
                        <div class="d-flex justify-content-between text-muted small">
                            <span class="text-white">Actual: @currentGoal.CurrentAmount.ToString("C2")</span>
                            <span class="text-white">Meta: @currentGoal.TargetAmount.ToString("C2")</span>
                        </div>
                        <div class="progress mt-2" style="height: 10px;">
                            <div class="progress-bar bg-success"
                                 style="width: @currentGoal.ProgressPercentage%">
                            </div>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label class="form-label fw-semibold text-white">Monto a Agregar (RD$)</label>
                        <input type="number" class="form-control form-control-lg"
                               @bind="progressAmount"
                               placeholder="0.00"
                               step="100"
                               min="0" />
                        <small class="text-white">
                            Falta: @currentGoal.RemainingAmount.ToString("C2")
                        </small>
                    </div>

                    <div class="d-flex gap-2 justify-content-end">
                        <button type="button" class="glass-button-secondary" @onclick="CloseProgressModal">
                            Cancelar
                        </button>
                        <button type="button" class="glass-button-action" @onclick="AddProgress" disabled="@isSaving">
                            @if (isSaving)
                            {
                                <span class="spinner-border spinner-border-sm me-2"></span>
                            }
                            <i class="bi bi-plus-circle me-2"></i>
                            Agregar
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
@code {
    private bool isLoading = true;
    private bool showModal = false;
    private bool showProgressModal = false;
    private bool isEditMode = false;
    private bool isSaving = false;
    private string userId = string.Empty;
    private decimal progressAmount = 0;

    private List<FinancialGoalDto> goals = new();
    private FinancialGoalDto currentGoal = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated ?? false)
        {
            userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value ?? string.Empty;
            await LoadGoals();
        }

        isLoading = false;
    }

    private async Task LoadGoals()
    {
        try
        {
            goals = await GoalService.GetAllAsync(userId);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading goals: {ex.Message}");
        }
    }

    private void OpenCreateModal()
    {
        currentGoal = new FinancialGoalDto
        {
            StartDate = DateTime.Now,
            TargetDate = DateTime.Now.AddMonths(6),
            Status = GoalStatus.InProgress,
            Icon = "🎯",
            CurrentAmount = 0
        };
        isEditMode = false;
        showModal = true;
    }

    private void OpenEditModal(FinancialGoalDto goal)
    {
        currentGoal = new FinancialGoalDto
        {
            GoalId = goal.GoalId,
            Title = goal.Title,
            Description = goal.Description,
            TargetAmount = goal.TargetAmount,
            CurrentAmount = goal.CurrentAmount,
            StartDate = goal.StartDate,
            TargetDate = goal.TargetDate,
            Status = goal.Status,
            Icon = goal.Icon
        };
        isEditMode = true;
        showModal = true;
    }

    private void OpenProgressModal(FinancialGoalDto goal)
    {
        currentGoal = goal;
        progressAmount = 0;
        showProgressModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
        currentGoal = new();
        isSaving = false;
    }

    private void CloseProgressModal()
    {
        showProgressModal = false;
        progressAmount = 0;
        isSaving = false;
    }

    private async Task SaveGoal()
    {
        try
        {
            isSaving = true;

            if (isEditMode)
            {
                await GoalService.UpdateAsync(currentGoal, userId);
            }
            else
            {
                await GoalService.CreateAsync(currentGoal, userId);
            }

            await LoadGoals();
            CloseModal();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving goal: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "Error al guardar la meta");
            isSaving = false;
        }
    }

    private async Task AddProgress()
    {
        if (progressAmount <= 0)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Ingresa un monto mayor a 0");
            return;
        }

        try
        {
            isSaving = true;
            await GoalService.AddProgressAsync(currentGoal.GoalId, userId, progressAmount);
            await LoadGoals();
            CloseProgressModal();

            // Mensaje de éxito
            var updatedGoal = goals.First(g => g.GoalId == currentGoal.GoalId);
            if (updatedGoal.IsCompleted)
            {
                await JSRuntime.InvokeVoidAsync("alert", "🎉 ¡Felicidades! Has completado tu meta.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding progress: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "Error al agregar progreso");
            isSaving = false;
        }
    }

    private async Task DeleteGoal(int goalId)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm",
            "¿Estás seguro de eliminar esta meta? Esta acción no se puede deshacer.");

        if (confirmed)
        {
            try
            {
                await GoalService.DeleteAsync(goalId, userId);
                await LoadGoals();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error deleting goal: {ex.Message}");
                await JSRuntime.InvokeVoidAsync("alert", "Error al eliminar la meta");
            }
        }
    }

    private string GetProgressBarColor(FinancialGoalDto goal)
    {
        if (goal.IsCompleted) return "bg-success";
        if (goal.ProgressPercentage >= 75) return "bg-info";
        if (goal.ProgressPercentage >= 50) return "bg-primary";
        if (goal.ProgressPercentage >= 25) return "bg-warning";
        return "bg-danger";
    }
}