@page "/categories"
@page "/categorias"
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@using Microsoft.JSInterop
@using MisFinanzas.Infrastructure.Interfaces
@using MisFinanzas.Domain.DTOs
@using MisFinanzas.Domain.Enums
@using System.ComponentModel.DataAnnotations
@using MisFinanzas.Components.Shared
@inject ICategoryService CategoryService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<PageTitle>Categorías - MisFinanzas</PageTitle>

<div class="categories-container">
    @if (!isAuthorized)
    {
        <div class="text-center text-white">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Cargando...</span>
            </div>
            <p class="mt-3">Verificando permisos...</p>
        </div>
    }
    else
    {
        <!-- Header -->
        <div class="page-header">
            <div class="d-flex justify-content-between align-items-center flex-wrap">
                <div class="mb-3 mb-md-0">
                    <h1>🏷️ Categorías</h1>
                    <p class="mb-0">Organiza tus gastos e ingresos</p>
                </div>
                <button class="btn btn-primary" @onclick="OpenModal">
                    <i class="bi bi-plus-circle"></i> Nueva Categoría
                </button>
            </div>
        </div>

        <!-- Mensajes -->
        @if (!string.IsNullOrEmpty(successMessage))
        {
            <div class="alert alert-success alert-dismissible fade show" role="alert">
                @successMessage
                <button type="button" class="btn-close" @onclick="() => successMessage = null"></button>
            </div>
        }

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                @errorMessage
                <button type="button" class="btn-close" @onclick="() => errorMessage = null"></button>
            </div>
        }

        @if (isLoading)
        {
            <div class="text-center py-5">
                <div class="spinner-border text-light" role="status"></div>
                <p class="text-white mt-3">Cargando categorías...</p>
            </div>
        }
        else
        {
            <!-- Categorías de Gastos -->
            <div class="categories-section">
                <h4 class="section-title">📉 Categorías de Gastos</h4>
                <div class="row">
                    @if (expenseCategories.Any())
                    {
                        @foreach (var category in expenseCategories)
                        {
                            <div class="col-md-3 col-sm-6 mb-3">
                                <div class="category-card expense">
                                    <div class="category-icon">@category.Icon</div>
                                    <div class="category-info">
                                        <h5>@category.Title</h5>
                                        <span class="badge bg-danger">Gasto</span>
                                    </div>
                                    <div class="category-actions">
                                        <button class="btn btn-sm btn-warning" @onclick="() => EditCategory(category)">
                                            <i class="bi bi-pencil"></i>
                                        </button>
                                        <button class="btn btn-sm btn-danger" @onclick="() => ConfirmDelete(category.CategoryId, category.Title)">
                                            <i class="bi bi-trash"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="col-12">
                            <p class="text-white text-center">No hay categorías de gastos. Crea una para comenzar.</p>
                        </div>
                    }
                </div>
            </div>

            <!-- Categorías de Ingresos -->
            <div class="categories-section">
                <h4 class="section-title">📈 Categorías de Ingresos</h4>
                <div class="row">
                    @if (incomeCategories.Any())
                    {
                        @foreach (var category in incomeCategories)
                        {
                            <div class="col-md-3 col-sm-6 mb-3">
                                <div class="category-card income">
                                    <div class="category-icon">@category.Icon</div>
                                    <div class="category-info">
                                        <h5>@category.Title</h5>
                                        <span class="badge bg-success">Ingreso</span>
                                    </div>
                                    <div class="category-actions">
                                        <button class="btn btn-sm btn-warning" @onclick="() => EditCategory(category)">
                                            <i class="bi bi-pencil"></i>
                                        </button>
                                        <button class="btn btn-sm btn-danger" @onclick="() => ConfirmDelete(category.CategoryId, category.Title)">
                                            <i class="bi bi-trash"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="col-12">
                            <p class="text-white text-center">No hay categorías de ingresos. Crea una para comenzar.</p>
                        </div>
                    }
                </div>
            </div>












        }

        
    }
</div>

<!-- Modal Agregar/Editar -->
@if (showModal)
{
    <div class="modal-backdrop show"></div>
    <div class="modal show d-block" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content bg-dark text-white">
                <div class="modal-header border-secondary">
                    <h5 class="modal-title">
                        @(isEditing ? "✏️ Editar Categoría" : "➕ Nueva Categoría")
                    </h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="formModel" OnValidSubmit="SaveCategory">
                        <DataAnnotationsValidator />

                        <div class="mb-3">
                            <label class="form-label">Nombre</label>
                            <InputText @bind-Value="formModel.Title" class="form-control" placeholder="Ej: Alimentación" />
                            <ValidationMessage For="() => formModel.Title" class="text-danger" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Tipo</label>
                            <InputSelect @bind-Value="formModel.Type" class="form-select">
                                <option value="@TransactionType.Expense">📉 Gasto</option>
                                <option value="@TransactionType.Income">📈 Ingreso</option>
                            </InputSelect>
                        </div>

                        <div class="mb-3">
                             <label class="form-label">Icono</label>
                              <IconSelector @bind-SelectedIcon="formModel.Icon" />
                              <ValidationMessage For="() => formModel.Icon" class="text-danger" />
                        </div>

                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-primary" disabled="@isSaving">
                                @if (isSaving)
                                {
                                    <span class="spinner-border spinner-border-sm me-2"></span>
                                    <span>Guardando...</span>
                                }
                                else
                                {
                                    <span>Guardar</span>
                                }
                            </button>
                            <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancelar</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

<!-- Modal de Eliminación -->
@if (showDeleteModal)
{
    <div class="modal-backdrop show"></div>
    <div class="modal show d-block" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content bg-dark text-white">
                <div class="modal-header border-secondary">
                    <h5 class="modal-title">⚠️ Confirmar Eliminación</h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="CancelDelete"></button>
                </div>
                <div class="modal-body">
                    <p>¿Estás seguro de que deseas eliminar la categoría <strong>@categoryToDelete</strong>?</p>
                    <p class="text-danger mb-0">
                        <small>Esta acción no se puede deshacer.</small>
                    </p>
                </div>
                <div class="modal-footer border-secondary">
                    <button type="button" class="btn btn-secondary" @onclick="CancelDelete">Cancelar</button>
                    <button type="button" class="btn btn-danger" @onclick="DeleteCategory">
                        <i class="bi bi-trash"></i> Eliminar
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private bool isAuthorized = false;
    private bool isLoading = true;
    private string? currentUserId;

    // Listas
    private List<CategoryDto> allCategories = new();
    private List<CategoryDto> expenseCategories = new();
    private List<CategoryDto> incomeCategories = new();

    // Mensajes
    private string? successMessage;
    private string? errorMessage;

    // Modal
    private bool showModal = false;
    private bool isSaving = false;
    private bool isEditing = false;
    private CategoryFormModel formModel = new();

    // Modal de eliminación
    private bool showDeleteModal = false;
    private int categoryIdToDelete;
    private string? categoryToDelete;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await CheckAuthorization();

            if (isAuthorized)
            {
                await LoadData();
            }

            StateHasChanged();
        }
    }

    private async Task CheckAuthorization()
    {
        try
        {
            currentUserId = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "userId");

            if (string.IsNullOrEmpty(currentUserId))
            {
                await JSRuntime.InvokeVoidAsync("eval", "window.location.href = '/login'");
                return;
            }

            isAuthorized = true;
        }
        catch
        {
            await JSRuntime.InvokeVoidAsync("eval", "window.location.href = '/login'");
        }
    }

    private async Task LoadData()
    {
        try
        {
            isLoading = true;

            if (string.IsNullOrEmpty(currentUserId))
                return;

            // Cargar todas las categorías
            allCategories = await CategoryService.GetAllByUserAsync(currentUserId);

            // Separar por tipo
            expenseCategories = allCategories.Where(c => c.Type == TransactionType.Expense).ToList();
            incomeCategories = allCategories.Where(c => c.Type == TransactionType.Income).ToList();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al cargar categorías: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void OpenModal()
    {
        isEditing = false;
        formModel = new CategoryFormModel
        {
            Type = TransactionType.Expense,
            Icon = "📁"
        };
        showModal = true;
    }

    private void EditCategory(CategoryDto category)
    {
        isEditing = true;
        formModel = new CategoryFormModel
        {
            CategoryId = category.CategoryId,
            Title = category.Title,
            Icon = category.Icon,
            Type = category.Type
        };
        showModal = true;
    }

    private async Task SaveCategory()
    {
        try
        {
            isSaving = true;
            errorMessage = null;

            if (string.IsNullOrWhiteSpace(formModel.Title))
            {
                errorMessage = "El nombre de la categoría es requerido";
                return;
            }

            if (string.IsNullOrWhiteSpace(formModel.Icon))
            {
                errorMessage = "El icono es requerido";
                return;
            }

            var dto = new CategoryDto
            {
                CategoryId = formModel.CategoryId,
                Title = formModel.Title.Trim(),
                Icon = formModel.Icon.Trim(),
                Type = formModel.Type
            };

            if (isEditing)
            {
                var result = await CategoryService.UpdateAsync(formModel.CategoryId, dto, currentUserId!);

                if (result)
                {
                    successMessage = "Categoría actualizada correctamente";
                    CloseModal();
                    await LoadData();
                }
                else
                {
                    errorMessage = "No se pudo actualizar la categoría";
                }
            }
            else
            {
                var created = await CategoryService.CreateAsync(dto, currentUserId!);

                if (created != null)
                {
                    successMessage = "Categoría creada correctamente";
                    CloseModal();
                    await LoadData();
                }
                else
                {
                    errorMessage = "No se pudo crear la categoría";
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
        finally
        {
            isSaving = false;
        }
    }

    private void CloseModal()
    {
        showModal = false;
        formModel = new();
        isEditing = false;
    }

    private void ConfirmDelete(int id, string title)
    {
        categoryIdToDelete = id;
        categoryToDelete = title;
        showDeleteModal = true;
    }

    private void CancelDelete()
    {
        showDeleteModal = false;
        categoryIdToDelete = 0;
        categoryToDelete = null;
    }

    private async Task DeleteCategory()
    {
        try
        {
            var result = await CategoryService.DeleteAsync(categoryIdToDelete, currentUserId!);

            if (result)
            {
                successMessage = $"Categoría '{categoryToDelete}' eliminada correctamente";
                showDeleteModal = false;
                categoryIdToDelete = 0;
                categoryToDelete = null;
                await LoadData();
            }
            else
            {
                errorMessage = "No se pudo eliminar la categoría";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
    }

    private class CategoryFormModel
    {
        public int CategoryId { get; set; }

        [Required(ErrorMessage = "El nombre es requerido")]
        [StringLength(50, ErrorMessage = "El nombre no puede exceder 50 caracteres")]
        public string Title { get; set; } = string.Empty;

        [Required(ErrorMessage = "El icono es requerido")]
        [StringLength(10, ErrorMessage = "El icono no puede exceder 10 caracteres")]
        public string Icon { get; set; } = "📁";

        public TransactionType Type { get; set; } = TransactionType.Expense;
    }
}