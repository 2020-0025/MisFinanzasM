@page "/login"
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@using Microsoft.AspNetCore.Identity
@using MisFinanzas.Domain.Entities
@using System.ComponentModel.DataAnnotations
@using Microsoft.JSInterop
@using MisFinanzas.Components.Layout
@using MisFinanzas.Services
@inject AuthService AuthService
@layout MinimalLayout
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<PageTitle>Iniciar Sesión - MisFinanzas</PageTitle>

<div class="auth-container">
    <div class="auth-card">
        <div class="auth-header">
            <h2>💰 Iniciar Sesión</h2>
            <p class="text-white">Accede a tu cuenta de MisFinanzas</p>
        </div>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger" role="alert">
                @errorMessage
            </div>
        }

        @if (!string.IsNullOrEmpty(successMessage))
        {
            <div class="alert alert-success" role="alert">
                @successMessage
            </div>
        }

        <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />

            <div class="mb-3">
                <label for="username" class="form-label">Usuario o Email</label>
                <InputText @bind-Value="loginModel.Username"
                           class="form-control"
                           id="username"
                           placeholder="Ingresa tu usuario o email" />
                <ValidationMessage For="() => loginModel.Username" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="password" class="form-label">Contraseña</label>
                <InputText @bind-Value="loginModel.Password"
                           type="password"
                           class="form-control"
                           id="password"
                           placeholder="Ingresa tu contraseña" />
                <ValidationMessage For="() => loginModel.Password" class="text-danger" />
            </div>

            <div class="form-check mb-3">
                <InputCheckbox @bind-Value="loginModel.RememberMe"
                               class="form-check-input"
                               id="rememberMe" />
                <label class="form-check-label" for="rememberMe">
                    Recordarme
                </label>
            </div>

            <button type="submit" class="btn btn-primary w-100 mb-3" disabled="@isLoading">
                @if (isLoading)
                {
                    <span class="spinner-border spinner-border-sm me-2"></span>
                    <span>Iniciando sesión...</span>
                }
                else
                {
                    <span>Iniciar Sesión</span>
                }
            </button>
        </EditForm>

        <div class="auth-footer">
            <p class="mb-2">
                <a href="/forgot-password">¿Olvidaste tu contraseña?</a>
            </p>
            <p>
                ¿No tienes cuenta? <a href="/register">Regístrate aquí</a>
            </p>
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new();
    private string? errorMessage;
    private string? successMessage;
    private bool isLoading = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        
        if (firstRender && AuthService.IsAuthenticated)
        {
             NavigationManager.NavigateTo("/profile", forceLoad: true);
        }
    }

    private async Task HandleLogin()
    {
        try
        {
            isLoading = true;
            errorMessage = null;
            successMessage = null;
            StateHasChanged();

            // Buscar usuario
            var user = await UserManager.FindByNameAsync(loginModel.Username)
                      ?? await UserManager.FindByEmailAsync(loginModel.Username);

            if (user == null)
            {
                errorMessage = "Usuario o contraseña incorrectos";
                return;
            }

            // Verificar que el usuario esté activo
            if (!user.IsActive)
            {
                errorMessage = "Tu cuenta ha sido desactivada. Contacta al administrador.";
                return;
            }

            // Verificar contraseña
            var passwordValid = await UserManager.CheckPasswordAsync(user, loginModel.Password);

            if (!passwordValid)
            {
                errorMessage = "Usuario o contraseña incorrectos";
                return;
            }

            // Actualizar LastLogin
            user.LastLogin = DateTime.UtcNow;
            await UserManager.UpdateAsync(user);

            // Guardar en sessionStorage usando AuthService
            var loginSuccess = await AuthService.LoginAsync(
                user.Id,
                user.UserName ?? user.FullName ?? "Usuario",
                user.UserRole ?? "User"
            );

            if (!loginSuccess)
            {
                errorMessage = "Error al establecer la sesión. Por favor, intenta de nuevo.";
                return;
            }

            successMessage = "✅ Login exitoso! Redirigiendo...";
            StateHasChanged();
            await Task.Delay(1000);

            // Determinar URL de redirección
            string redirectUrl = user.UserRole == "Admin" ? "/admin" : "/profile";

            // Redirigir
            await JSRuntime.InvokeVoidAsync("eval", $"window.location.href = '{redirectUrl}'");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al iniciar sesión: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private class LoginModel
    {
        [Required(ErrorMessage = "El usuario o email es requerido")]
        public string Username { get; set; } = string.Empty;

        [Required(ErrorMessage = "La contraseña es requerida")]
        public string Password { get; set; } = string.Empty;

        public bool RememberMe { get; set; } = false;
    }
}