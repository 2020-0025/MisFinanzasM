@page "/categories"
@using MisFinanzas.Domain.DTOs
@using MisFinanzas.Domain.Enums
@using MisFinanzas.Infrastructure.Interfaces
@using System.Security.Claims
@using MisFinanzas.Components.Shared
@inject ICategoryService CategoryService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime
@attribute [Authorize]
@rendermode InteractiveServer

<PageTitle>Categorías - Mis Finanzas</PageTitle>

<div class="categories-container">

    <!-- Header con efecto glass -->
    <div class="glass-card categories-header animate-slide-up">
        <div class="d-flex justify-content-between align-items-center flex-wrap gap-3 text-white">
            <div>
                <h1 class="h3 mb-1 text-white fw-bold">
                    <span style="font-size: 32px;">📁</span>
                    <strong>Categorías</strong>
                </h1>
                <p class="mb-0">Organiza tus transacciones</p>
            </div>
            <button class="glass-button-action text-white" @onclick="OpenCreateModal">
                <span style="font-size: 17px;">➕</span>Nueva Categoría
            </button>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="glass-card text-center py-5 animate-slide-up animate-delay-1">
            <div class="spinner-border text-success" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">Cargando...</span>
            </div>
            <p class="text-white mt-3 mb-0">Cargando categorías...</p>
        </div>
    }
    else if (!categories.Any())
    {
        <div class="glass-card animate-slide-up animate-delay-1">
            <div class="empty-state-categories">
                <i class="bi bi-folder-x"></i>
                <h5 class="text-white mt-3 mb-2">No hay categorías</h5>
                <p class="text-white-50 mb-4">Crea tu primera categoría para organizar tus transacciones</p>
                <button class="glass-button-action text-white" @onclick="OpenCreateModal">
                    <span style="font-size: 17px;">➕</span>Crear Categoría
                </button>
            </div>
        </div>
    }
    else
    {
        <div class="glass-card animate-slide-up animate-delay-1">
            <div class="table-responsive">
                <table class="table-glass-categories mb-0">
                    <thead>
                        <tr>
                            <th class="text-white" style="width: 80px;">Icono</th>
                            <th class="text-white">Título</th>
                            <th class="text-white" style="width: 180px;">Tipo</th>
                            <th class="text-white text-end" style="width: 150px;">Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var category in categories)
                        {
                            <tr class="category-row">
                                <td>
                                    <span class="category-icon">@category.Icon</span>
                                </td>
                                <td>
                                    <span class="text-white fw-semibold">@category.Title</span>
                                </td>
                                <td>
                                    @if (category.Type == TransactionType.Income)
                                    {
                                        <span class="badge-glass badge-income">
                                            <span style="font-size: 13px;">📈</span> Ingreso
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="badge-glass badge-expense">
                                            <span style="font-size: 13px;">📉</span> Gasto
                                        </span>
                                    }
                                </td>
                                <td class="text-end">
                                    <button class="btn-action btn-edit" @onclick="() => OpenEditModal(category)" title="Editar">
                                        <span style="font-size: 13px;">📝</span>
                                    </button>
                                    <button class="btn-action btn-delete" @onclick="() => DeleteCategory(category.CategoryId)" title="Eliminar">
                                        <span style="font-size: 13px;">🗑️</span>
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

        //Resumen
        <div class="glass-card mt-3 animate-slide-up animate-delay-2" style="padding: 1rem;">
            <small class="text-white">
                <span style="font-size: 13px;">ℹ️</span>
                Total: @categories.Count categoría(s)
            </small>
        </div>
    }
</div>

<!-- Modal -->
@if (showModal)
{
    <div class="modal-overlay" @onclick="CloseModal"></div>
    <div class="modal-glass">
        <div class="modal-glass-content">
            <div class="modal-glass-header">
                <h5 class="text-white fw-bold mb-0">
                    @(isEditMode ? "Editar Categoría" : "Nueva Categoría")
                </h5>
                <button type="button" class="btn-close-glass" @onclick="CloseModal">
                    <i class="bi bi-x-lg"></i>
                </button>
            </div>
            <div class="modal-glass-body">
                <EditForm Model="currentCategory" OnValidSubmit="SaveCategory">
                    <DataAnnotationsValidator />

                    <div class="form-group-glass">
                        <label class="form-label-glass text-white">Título</label>
                        <InputText class="form-control-glass" @bind-Value="currentCategory.Title"
                                   placeholder="Ej: Comida, Transporte" />
                        <ValidationMessage For="@(() => currentCategory.Title)" class="text-danger small" />
                    </div>

                    <!-- Selector de Iconos -->
                    <div class="form-group-glass text-white">
                        <IconSelector Label="Icono"
                                      @bind-SelectedIcon="currentCategory.Icon" />
                        <ValidationMessage For="@(() => currentCategory.Icon)" class="text-danger small" />
                    </div>

                    <div class="form-group-glass">
                        <label class="form-label-glass text-white">Tipo</label>
                        <InputSelect class="form-control-glass" @bind-Value="currentCategory.Type">
                            <option value="@TransactionType.Expense">Gasto</option>
                            <option value="@TransactionType.Income">Ingreso</option>
                        </InputSelect>
                        <ValidationMessage For="@(() => currentCategory.Type)" class="text-danger small" />
                    </div>

                    <div class="d-flex gap-2 justify-content-end mt-4">
                        <button type="button" class="glass-button-secondary" @onclick="CloseModal">
                            Cancelar
                        </button>
                        <button type="submit" class="glass-button-action" disabled="@isSaving">
                            @if (isSaving)
                            {
                                <span class="spinner-border spinner-border-sm me-2"></span>
                            }
                            @(isEditMode ? "Actualizar" : "Crear")
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}
@code {
    private bool isLoading = true;
    private bool showModal = false;
    private bool isEditMode = false;
    private bool isSaving = false;
    private string userId = string.Empty;

    private List<CategoryDto> categories = new();
    private CategoryDto currentCategory = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated ?? false)
        {
            userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value ?? string.Empty;
            await LoadCategories();
        }

        isLoading = false;
    }

    private async Task LoadCategories()
    {
        try
        {
            categories = await CategoryService.GetAllAsync(userId);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading categories: {ex.Message}");
        }
    }

    private void OpenCreateModal()
    {
        currentCategory = new CategoryDto
        {
            Type = TransactionType.Expense,
            Icon = "📁"
        };
        isEditMode = false;
        showModal = true;
    }

    private void OpenEditModal(CategoryDto category)
    {
        currentCategory = new CategoryDto
        {
            CategoryId = category.CategoryId,
            Title = category.Title,
            Icon = category.Icon,
            Type = category.Type
        };
        isEditMode = true;
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
        currentCategory = new();
        isSaving = false;
    }

    private async Task SaveCategory()
    {
        try
        {
            isSaving = true;

            if (isEditMode)
            {
                await CategoryService.UpdateAsync(currentCategory, userId);
            }
            else
            {
                await CategoryService.CreateAsync(currentCategory, userId);
            }

            await LoadCategories();
            CloseModal();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving category: {ex.Message}");
            isSaving = false;
        }
    }

    private async Task DeleteCategory(int categoryId)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm",
            "¿Estás seguro de eliminar esta categoría? Esta acción no se puede deshacer.");

        if (confirmed)
        {
            try
            {
                await CategoryService.DeleteAsync(categoryId, userId);
                await LoadCategories();
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert",
                    "No se puede eliminar esta categoría porque tiene transacciones asociadas.");
                Console.WriteLine($"Error deleting category: {ex.Message}");
            }
        }
    }
}
