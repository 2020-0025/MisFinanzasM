@page "/budgets"
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@using Microsoft.JSInterop
@using MisFinanzas.Infrastructure.Interfaces
@using MisFinanzas.Domain.DTOs
@using System.ComponentModel.DataAnnotations
@inject IBudgetService BudgetService
@inject ICategoryService CategoryService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<PageTitle>Presupuestos - MisFinanzas</PageTitle>

<div class="budgets-container">
    @if (!isAuthorized)
    {
        <div class="text-center text-white">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Cargando...</span>
            </div>
            <p class="mt-3">Verificando permisos...</p>
        </div>
    }
    else
    {
        <!-- Header -->
        <div class="page-header">
            <div class="d-flex justify-content-between align-items-center flex-wrap">
                <div class="mb-3 mb-md-0">
                    <h1>💰 Presupuestos</h1>
                    <p class="mb-0">Controla tus gastos por categoría</p>
                </div>
                <button class="btn btn-primary" @onclick="OpenCreateModal">
                    <i class="bi bi-plus-circle"></i> Nuevo Presupuesto
                </button>
            </div>
        </div>

        <!-- Selector de Mes/Año -->
        <div class="period-selector-card">
            <div class="row align-items-center">
                <div class="col-md-4">
                    <label class="form-label text-white">Mes</label>
                    <select class="form-select" @bind="selectedMonth" @bind:after="LoadData">
                        <option value="1">Enero</option>
                        <option value="2">Febrero</option>
                        <option value="3">Marzo</option>
                        <option value="4">Abril</option>
                        <option value="5">Mayo</option>
                        <option value="6">Junio</option>
                        <option value="7">Julio</option>
                        <option value="8">Agosto</option>
                        <option value="9">Septiembre</option>
                        <option value="10">Octubre</option>
                        <option value="11">Noviembre</option>
                        <option value="12">Diciembre</option>
                    </select>
                </div>
                <div class="col-md-4">
                    <label class="form-label text-white">Año</label>
                    <select class="form-select" @bind="selectedYear" @bind:after="LoadData">
                        @for (int year = DateTime.Now.Year - 1; year <= DateTime.Now.Year + 1; year++)
                        {
                            <option value="@year">@year</option>
                        }
                    </select>
                </div>
                <div class="col-md-4 d-flex align-items-end">
                    <button class="btn btn-info w-100" @onclick="SetCurrentMonth">
                        <i class="bi bi-calendar-today"></i> Mes Actual
                    </button>
                </div>
            </div>
        </div>

        <!-- Resumen General -->
        <div class="summary-card">
            <h4>📊 Resumen del Periodo</h4>
            <div class="row">
                <div class="col-md-4">
                    <div class="summary-item">
                        <span class="summary-label">Presupuesto Total</span>
                        <h3 class="text-primary">@totalBudget.ToString("C")</h3>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="summary-item">
                        <span class="summary-label">Gastado Total</span>
                        <h3 class="@(totalSpent > totalBudget ? "text-danger" : "text-warning")">
                            @totalSpent.ToString("C")
                        </h3>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="summary-item">
                        <span class="summary-label">Disponible</span>
                        <h3 class="@(totalAvailable >= 0 ? "text-success" : "text-danger")">
                            @totalAvailable.ToString("C")
                        </h3>
                    </div>
                </div>
            </div>

            <div class="progress mt-3" style="height: 30px;">
                <div class="progress-bar @GetProgressBarClass(totalPercentage)"
                     role="progressbar"
                     style="width: @Math.Min(totalPercentage, 100)%"
                     aria-valuenow="@totalPercentage"
                     aria-valuemin="0"
                     aria-valuemax="100">
                    <strong>@totalPercentage.ToString("F1")%</strong>
                </div>
            </div>
        </div>

        <!-- Mensajes -->
        @if (!string.IsNullOrEmpty(successMessage))
        {
            <div class="alert alert-success alert-dismissible fade show" role="alert">
                @successMessage
                <button type="button" class="btn-close" @onclick="() => successMessage = null"></button>
            </div>
        }

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                @errorMessage
                <button type="button" class="btn-close" @onclick="() => errorMessage = null"></button>
            </div>
        }

        <!-- Lista de Presupuestos -->
        <div class="budgets-list-card">
            <div class="card-header">
                <h4>📋 Presupuestos por Categoría</h4>
            </div>
            <div class="card-body">
                @if (isLoading)
                {
                    <div class="text-center py-5">
                        <div class="spinner-border text-light" role="status"></div>
                        <p class="text-white mt-3">Cargando presupuestos...</p>
                    </div>
                }
                else if (!budgets.Any())
                {
                    <div class="text-center py-5">
                        <p class="text-white">No hay presupuestos configurados para este periodo</p>
                        <button class="btn btn-primary mt-3" @onclick="OpenCreateModal">
                            <i class="bi bi-plus-circle"></i> Crear Primer Presupuesto
                        </button>
                    </div>
                }
                else
                {
                    <div class="row">
                        @foreach (var budget in budgets)
                        {
                            <div class="col-lg-6 col-md-12 mb-3">
                                <div class="budget-item @(budget.IsOverBudget ? "over-budget" : budget.IsNearLimit ? "near-limit" : "")">
                                    <div class="d-flex justify-content-between align-items-start mb-2">
                                        <div class="d-flex align-items-center gap-2">
                                            <span class="category-icon">@budget.CategoryIcon</span>
                                            <div>
                                                <h5 class="mb-0">@budget.CategoryTitle</h5>
                                                <small class="text-muted">@budget.Name</small>
                                            </div>
                                        </div>
                                        <div class="budget-actions">
                                            <button class="btn btn-sm btn-warning" @onclick="() => EditBudget(budget)">
                                                <i class="bi bi-pencil"></i>
                                            </button>
                                            <button class="btn btn-sm btn-danger" @onclick="() => ConfirmDelete(budget.Id, budget.CategoryTitle)">
                                                <i class="bi bi-trash"></i>
                                            </button>
                                        </div>
                                    </div>

                                    <div class="budget-amounts">
                                        <div class="d-flex justify-content-between mb-2">
                                            <span>Gastado: <strong>@budget.SpentAmount.ToString("C")</strong></span>
                                            <span>Presupuesto: <strong>@budget.AssignedAmount.ToString("C")</strong></span>
                                        </div>
                                        <div class="progress" style="height: 20px;">
                                            <div class="progress-bar @GetProgressBarClass(budget.UsedPercentage)"
                                                 role="progressbar"
                                                 style="width: @Math.Min(budget.UsedPercentage, 100)%"
                                                 aria-valuenow="@budget.UsedPercentage"
                                                 aria-valuemin="0"
                                                 aria-valuemax="100">
                                                @budget.UsedPercentage.ToString("F1")%
                                            </div>
                                        </div>
                                        <div class="mt-2 text-end">
                                            <small class="@(budget.IsOverBudget ? "text-danger" : "text-success")">
                                                @(budget.IsOverBudget ? "Excedido por " : "Disponible: ")
                                                <strong>@budget.AvailableAmount.ToString("C")</strong>
                                            </small>
                                        </div>
                                    </div>

                                    <div class="budget-status mt-2">
                                        <span class="badge @GetStatusBadgeClass(budget)">
                                            @budget.StatusDisplay
                                        </span>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
    }
</div>

<!-- Modal Crear/Editar Presupuesto -->
@if (showModal)
{
    <div class="modal-backdrop show"></div>
    <div class="modal show d-block" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content bg-dark text-white">
                <div class="modal-header border-secondary">
                    <h5 class="modal-title">
                        @(isEditing ? "✏️ Editar Presupuesto" : "➕ Nuevo Presupuesto")
                    </h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="formModel" OnValidSubmit="SaveBudget">
                        <DataAnnotationsValidator />

                        <div class="mb-3">
                            <label class="form-label">Categoría</label>
                            <select class="form-select" @bind="formModel.CategoryId" disabled="@isEditing">
                                <option value="0">Selecciona una categoría</option>
                                @foreach (var category in expenseCategories)
                                {
                                    <option value="@category.CategoryId">@category.Icon @category.Title</option>
                                }
                            </select>
                            <ValidationMessage For="() => formModel.CategoryId" class="text-danger" />
                            @if (isEditing)
                            {
                                <small class="form-text text-muted">No se puede cambiar la categoría</small>
                            }
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Nombre del Presupuesto</label>
                            <InputText @bind-Value="formModel.Name" class="form-control" placeholder="Ej: Presupuesto Alimentación" />
                            <ValidationMessage For="() => formModel.Name" class="text-danger" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Monto Asignado</label>
                            <InputNumber @bind-Value="formModel.AssignedAmount" class="form-control" placeholder="0.00" />
                            <ValidationMessage For="() => formModel.AssignedAmount" class="text-danger" />
                        </div>

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Mes</label>
                                <select class="form-select" @bind="formModel.Month" disabled="@isEditing">
                                    <option value="1">Enero</option>
                                    <option value="2">Febrero</option>
                                    <option value="3">Marzo</option>
                                    <option value="4">Abril</option>
                                    <option value="5">Mayo</option>
                                    <option value="6">Junio</option>
                                    <option value="7">Julio</option>
                                    <option value="8">Agosto</option>
                                    <option value="9">Septiembre</option>
                                    <option value="10">Octubre</option>
                                    <option value="11">Noviembre</option>
                                    <option value="12">Diciembre</option>
                                </select>
                                @if (isEditing)
                                {
                                    <small class="form-text text-muted">No se puede cambiar el mes</small>
                                }
                            </div>

                            <div class="col-md-6 mb-3">
                                <label class="form-label">Año</label>
                                <select class="form-select" @bind="formModel.Year" disabled="@isEditing">
                                    @for (int year = DateTime.Now.Year - 1; year <= DateTime.Now.Year + 2; year++)
                                    {
                                        <option value="@year">@year</option>
                                    }
                                </select>
                                @if (isEditing)
                                {
                                    <small class="form-text text-muted">No se puede cambiar el año</small>
                                }
                            </div>
                        </div>

                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-primary" disabled="@isSaving">
                                @if (isSaving)
                                {
                                    <span class="spinner-border spinner-border-sm me-2"></span>
                                    <span>Guardando...</span>
                                }
                                else
                                {
                                    <span>Guardar Presupuesto</span>
                                }
                            </button>
                            <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancelar</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

<!-- Modal Confirmar Eliminación -->
@if (showDeleteModal)
{
    <div class="modal-backdrop show"></div>
    <div class="modal show d-block" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content bg-dark text-white">
                <div class="modal-header border-secondary">
                    <h5 class="modal-title">⚠️ Eliminar Presupuesto</h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="CloseDeleteModal"></button>
                </div>
                <div class="modal-body">
                    <p>¿Estás seguro de que deseas eliminar el presupuesto de <strong>@budgetToDelete</strong>?</p>
                    <p class="text-danger mb-0">
                        <strong>Esta acción no se puede deshacer.</strong>
                    </p>
                </div>
                <div class="modal-footer border-secondary">
                    <button type="button" class="btn btn-secondary" @onclick="CloseDeleteModal">Cancelar</button>
                    <button type="button" class="btn btn-danger" @onclick="DeleteBudget">
                        <i class="bi bi-trash"></i> Eliminar
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private bool isAuthorized = false;
    private bool isLoading = true;
    private string? currentUserId;

    // Selector de periodo
    private int selectedMonth = DateTime.Now.Month;
    private int selectedYear = DateTime.Now.Year;

    // Listas
    private List<BudgetDto> budgets = new();
    private List<CategoryDto> expenseCategories = new();

    // Resumen
    private decimal totalBudget = 0;
    private decimal totalSpent = 0;
    private decimal totalAvailable = 0;
    private decimal totalPercentage = 0;

    // Mensajes
    private string? successMessage;
    private string? errorMessage;

    // Modal Crear/Editar
    private bool showModal = false;
    private bool isSaving = false;
    private bool isEditing = false;
    private BudgetFormModel formModel = new();

    // Modal Eliminar
    private bool showDeleteModal = false;
    private int budgetIdToDelete;
    private string? budgetToDelete;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await CheckAuthorization();

            if (isAuthorized)
            {
                await LoadData();
            }

            StateHasChanged();
        }
    }

    private async Task CheckAuthorization()
    {
        try
        {
            currentUserId = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "userId");

            if (string.IsNullOrEmpty(currentUserId))
            {
                await JSRuntime.InvokeVoidAsync("eval", "window.location.href = '/login'");
                return;
            }

            isAuthorized = true;
        }
        catch
        {
            await JSRuntime.InvokeVoidAsync("eval", "window.location.href = '/login'");
        }
    }

    private async Task LoadData()
    {
        try
        {
            isLoading = true;

            if (string.IsNullOrEmpty(currentUserId))
                return;

            // Cargar presupuestos del periodo seleccionado
            budgets = await BudgetService.GetByUserAndPeriodAsync(currentUserId, selectedMonth, selectedYear);

            // Cargar categorías de gastos (para el formulario)
            var allCategories = await CategoryService.GetAllByUserAsync(currentUserId);
            expenseCategories = allCategories
                .Where(c => c.Type == Domain.Enums.TransactionType.Expense)
                .ToList();

            // Calcular resumen
            totalBudget = await BudgetService.GetTotalBudgetForMonthAsync(currentUserId, selectedMonth, selectedYear);
            totalSpent = await BudgetService.GetTotalSpentForMonthAsync(currentUserId, selectedMonth, selectedYear);
            totalAvailable = totalBudget - totalSpent;
            totalPercentage = totalBudget > 0 ? (totalSpent / totalBudget) * 100 : 0;
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al cargar datos: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void SetCurrentMonth()
    {
        selectedMonth = DateTime.Now.Month;
        selectedYear = DateTime.Now.Year;
        _ = LoadData();
    }

    private void OpenCreateModal()
    {
        isEditing = false;
        formModel = new BudgetFormModel
        {
            Month = selectedMonth,
            Year = selectedYear
        };
        showModal = true;
    }

    private void EditBudget(BudgetDto budget)
    {
        isEditing = true;
        formModel = new BudgetFormModel
        {
            Id = budget.Id,
            CategoryId = budget.CategoryId,
            Name = budget.Name,
            AssignedAmount = budget.AssignedAmount,
            Month = budget.Month,
            Year = budget.Year
        };
        showModal = true;
    }

    private async Task SaveBudget()
    {
        try
        {
            isSaving = true;
            errorMessage = null;

            if (formModel.CategoryId == 0)
            {
                errorMessage = "Debes seleccionar una categoría";
                return;
            }

            if (string.IsNullOrWhiteSpace(formModel.Name))
            {
                errorMessage = "El nombre del presupuesto es requerido";
                return;
            }

            if (formModel.AssignedAmount <= 0)
            {
                errorMessage = "El monto debe ser mayor a cero";
                return;
            }

            var dto = new BudgetDto
            {
                Id = formModel.Id,
                CategoryId = formModel.CategoryId,
                Name = formModel.Name.Trim(),
                AssignedAmount = formModel.AssignedAmount,
                Month = formModel.Month,
                Year = formModel.Year,
                IsActive = true
            };

            if (isEditing)
            {
                var result = await BudgetService.UpdateAsync(formModel.Id, dto, currentUserId!);

                if (result)
                {
                    successMessage = "Presupuesto actualizado correctamente";
                    CloseModal();
                    await LoadData();
                }
                else
                {
                    errorMessage = "No se pudo actualizar el presupuesto";
                }
            }
            else
            {
                var created = await BudgetService.CreateAsync(dto, currentUserId!);

                if (created.Success && created.Budget != null)
                {
                    successMessage = "Presupuesto creado correctamente";
                    CloseModal();
                    await LoadData();
                }
                else
                {
                    errorMessage = created.Error ?? "No se pudo crear el presupuesto";
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
        finally
        {
            isSaving = false;
        }
    }

    private void CloseModal()
    {
        showModal = false;
        formModel = new();
        isEditing = false;
    }

    private void ConfirmDelete(int id, string categoryTitle)
    {
        budgetIdToDelete = id;
        budgetToDelete = categoryTitle;
        showDeleteModal = true;
    }

    private async Task DeleteBudget()
    {
        try
        {
            var result = await BudgetService.DeleteAsync(budgetIdToDelete, currentUserId!);

            if (result)
            {
                successMessage = $"Presupuesto de '{budgetToDelete}' eliminado correctamente";
                CloseDeleteModal();
                await LoadData();
            }
            else
            {
                errorMessage = "No se pudo eliminar el presupuesto";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
    }

    private void CloseDeleteModal()
    {
        showDeleteModal = false;
        budgetIdToDelete = 0;
        budgetToDelete = null;
    }

    // Helpers para estilos
    private string GetProgressBarClass(decimal percentage) => percentage switch
    {
        >= 100 => "bg-danger",
        >= 80 => "bg-warning",
        >= 50 => "bg-info",
        _ => "bg-success"
    };

    private string GetStatusBadgeClass(BudgetDto budget)
    {
        if (budget.IsOverBudget) return "bg-danger";
        if (budget.IsNearLimit) return "bg-warning";
        return "bg-success";
    }

    // Modelo de formulario
    private class BudgetFormModel
    {
        public int Id { get; set; }

        [Required(ErrorMessage = "La categoría es requerida")]
        [Range(1, int.MaxValue, ErrorMessage = "Debes seleccionar una categoría")]
        public int CategoryId { get; set; }

        [Required(ErrorMessage = "El nombre es requerido")]
        [StringLength(200, ErrorMessage = "El nombre no puede exceder 200 caracteres")]
        public string Name { get; set; } = string.Empty;

        [Required(ErrorMessage = "El monto es requerido")]
        [Range(0.01, double.MaxValue, ErrorMessage = "El monto debe ser mayor a cero")]
        public decimal AssignedAmount { get; set; }

        [Required]
        [Range(1, 12)]
        public int Month { get; set; }

        [Required]
        [Range(2020, 2100)]
        public int Year { get; set; }
    }
}