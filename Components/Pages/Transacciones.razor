@page "/transactions"
@using MisFinanzas.Domain.DTOs
@using MisFinanzas.Domain.Enums
@using MisFinanzas.Infrastructure.Interfaces
@using System.Security.Claims
@inject ITransactionService TransactionService
@inject ICategoryService CategoryService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime
@attribute [Authorize]
@rendermode InteractiveServer

<PageTitle>Transacciones - Mis Finanzas</PageTitle>

<div class="transactions-container">

    <!-- Header con efecto glass -->
    <div class="glass-card transactions-header animate-slide-up">
        <div class="d-flex justify-content-between align-items-center flex-wrap gap-3">
            <div>
                <h1 class="h3 mb-1 text-white fw-bold">
                    <span style="font-size: 32px;">💳</span>
                    <strong>Transacciones</strong>
                </h1>
                <p class="text-white mb-0">Gestiona tus movimientos financieros</p>
            </div>
            <button class="glass-button-action text-white" @onclick="OpenCreateModal">
                <span style="font-size: 17px;">➕</span>Nueva Transacción
            </button>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="glass-card text-center py-5 animate-slide-up animate-delay-1">
            <div class="spinner-border text-success" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">Cargando...</span>
            </div>
            <p class="text-white-50 mt-3 mb-0">Cargando transacciones...</p>
        </div>
    }
    else if (!transactions.Any())
    {
        <div class="glass-card animate-slide-up animate-delay-1">
            <div class="empty-state-transactions">
                <i class="bi bi-receipt"></i>
                <h5 class="text-white mt-3 mb-2">No hay transacciones</h5>
                <p class="text-white-50 mb-4">Registra tu primera transacción para comenzar a controlar tus finanzas</p>

                @if (!categories.Any())
                {
                    <div class="alert-glass alert-warning mb-3">
                        <i class="bi bi-exclamation-triangle me-2"></i>
                        Primero necesitas crear al menos una categoría.
                        <a href="/categories" class="alert-link-glass">Crear categoría</a>
                    </div>
                }
                else
                {
                    <button class="glass-button-action" @onclick="OpenCreateModal">
                        <i class="bi bi-plus-circle me-2"></i>Crear Transacción
                    </button>
                }
            </div>
        </div>
    }
    else
    {
        <!-- Filtros -->
        <div class="glass-card mb-4 animate-slide-up animate-delay-1">
            <div class="filters-grid">
                <div class="filter-item">
                    <label class="form-label-glass text-white">Filtrar por Categoría</label>
                    <select class="form-control-glass" @bind="filterCategoryId">
                        <option value="0">Todas las categorías</option>
                        @foreach (var category in categories)
                        {
                            <option value="@category.CategoryId">@category.TitleWithIcon</option>
                        }
                    </select>
                </div>
                <div class="filter-item">
                    <label class="form-label-glass text-white">Filtrar por Tipo</label>
                    <select class="form-control-glass" @bind="filterType">
                        <option value="">Todos</option>
                        <option value="Income">Ingresos</option>
                        <option value="Expense">Gastos</option>
                    </select>
                </div>
                <div class="filter-item">
                    <label class="form-label-glass text-white">Ordenar por</label>
                    <select class="form-control-glass" @bind="sortOrder">
                        <option value="newest">Más recientes</option>
                        <option value="oldest">Más antiguas</option>
                        <option value="highest">Mayor monto</option>
                        <option value="lowest">Menor monto</option>
                    </select>
                </div>
            </div>
        </div>

        <!-- Tabla de transacciones -->
        <div class="glass-card animate-slide-up animate-delay-2">
            <div class="table-responsive">
                <table class="table-glass-transactions mb-0">
                    <thead>
                        <tr>
                            <th class="text-white">Categoría</th>
                            <th class="text-white">Monto</th>
                            <th class="text-white">Nota</th>
                            <th class="text-white">Fecha</th>
                            <th class="text-end text-white">Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var transaction in FilteredAndSortedTransactions)
                        {
                            <tr class="transaction-row">
                                <td>
                                    <div class="d-flex align-items-center gap-2">
                                        <span class="transaction-icon">@transaction.CategoryIcon</span>
                                        <span class="text-white fw-semibold">@transaction.CategoryName</span>
                                    </div>
                                </td>
                                <td>
                                    <span class="transaction-amount @(GetCategoryType(transaction.CategoryId) == TransactionType.Income ? "amount-income" : "amount-expense")">
                                        @transaction.FormattedAmount
                                    </span>
                                </td>
                                <td>
                                    <span class="text-white">@transaction.Note</span>
                                </td>
                                <td>
                                    <small class="text-white">@transaction.Date.ToString("dd/MM/yyyy")</small>
                                </td>
                                <td class="text-end">
                                    <button class="btn-action btn-edit" @onclick="() => OpenEditModal(transaction)" title="Editar">
                                        <span style="font-size: 13px;">📝</span>
                                    </button>
                                    <button class="btn-action btn-delete" @onclick="() => DeleteTransaction(transaction.TransactionId)" title="Eliminar">
                                        <span style="font-size: 13px;">🗑️</span>
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Resumen -->
        <div class="glass-card mt-3 animate-slide-up animate-delay-3">
            <div class="summary-grid">
                <div class="summary-item">
                    <span style="font-size: 13px;">ℹ️</span>
                    <span class="text-white">Total: @FilteredAndSortedTransactions.Count() transacción(es)</span>
                </div>
                <div class="summary-item summary-income">
                    <span style="font-size: 13px;">📈</span>
                    <span>Ingresos: @CalculateTotalIncome().ToString("C2")</span>
                </div>
                <div class="summary-item summary-expense">
                    <span style="font-size: 13px;">📉</span>
                    <span>Gastos: @CalculateTotalExpense().ToString("C2")</span>
                </div>
            </div>
        </div>
    }
</div>

<!-- Modal -->
@if (showModal)
{
    <div class="modal-overlay" @onclick="CloseModal"></div>
    <div class="modal-glass">
        <div class="modal-glass-content">
            <div class="modal-glass-header">
                <h5 class="text-white fw-bold mb-0">
                    @(isEditMode ? "Editar Transacción" : "Nueva Transacción")
                </h5>
                <button type="button" class="btn-close-glass" @onclick="CloseModal">
                    <i class="bi bi-x-lg"></i>
                </button>
            </div>
            <div class="modal-glass-body">
                @if (!categories.Any())
                {
                    <div class="alert-glass alert-warning">
                        <i class="bi bi-exclamation-triangle me-2"></i>
                        No tienes categorías creadas.
                        <a href="/categories" class="alert-link-glass">Crear una categoría primero</a>
                    </div>
                }
                else
                {
                    <EditForm Model="currentTransaction" OnValidSubmit="SaveTransaction">
                        <DataAnnotationsValidator />

                        <div class="form-group-glass">
                            <label class="form-label-glass text-white">Categoría</label>
                            <InputSelect class="form-control-glass" @bind-Value="currentTransaction.CategoryId">
                                <option value="0">-- Selecciona una categoría --</option>
                                @foreach (var category in categories)
                                {
                                    <option value="@category.CategoryId">@category.TitleWithIcon</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => currentTransaction.CategoryId)" class="text-danger small" />
                        </div>

                        <div class="form-group-glass">
                            <label class="form-label-glass text-white">Monto (RD$)</label>
                            <InputNumber class="form-control-glass" @bind-Value="currentTransaction.Amount"
                                         placeholder="0.00" step="0.01" />
                            <ValidationMessage For="@(() => currentTransaction.Amount)" class="text-danger small" />
                        </div>

                        <div class="form-group-glass">
                            <label class="form-label-glass text-white">Nota</label>
                            <InputText class="form-control-glass" @bind-Value="currentTransaction.Note"
                                       placeholder="Descripción de la transacción" />
                            <ValidationMessage For="@(() => currentTransaction.Note)" class="text-danger small" />
                        </div>

                        <div class="form-group-glass">
                            <label class="form-label-glass text-white">Fecha</label>
                            <InputDate class="form-control-glass" @bind-Value="currentTransaction.Date" />
                            <ValidationMessage For="@(() => currentTransaction.Date)" class="text-danger small" />
                        </div>

                        <div class="d-flex gap-2 justify-content-end mt-4">
                            <button type="button" class="glass-button-secondary text-white" @onclick="CloseModal">
                                Cancelar
                            </button>
                            <button type="submit" class="glass-button-action text-white" disabled="@isSaving">
                                @if (isSaving)
                                {
                                    <span class="spinner-border spinner-border-sm me-2"></span>
                                }
                                @(isEditMode ? "Actualizar" : "Crear")
                            </button>
                        </div>
                    </EditForm>
                }
            </div>
        </div>
    </div>
}
@code {
    private bool isLoading = true;
    private bool showModal = false;
    private bool isEditMode = false;
    private bool isSaving = false;
    private string userId = string.Empty;

    private List<TransactionDto> transactions = new();
    private List<CategoryDto> categories = new();
    private TransactionDto currentTransaction = new();

    // Filtros
    private int filterCategoryId = 0;
    private string filterType = "";
    private string sortOrder = "newest";

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated ?? false)
        {
            userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value ?? string.Empty;
            await LoadData();
        }

        isLoading = false;
    }

    private async Task LoadData()
    {
        try
        {
            transactions = await TransactionService.GetAllAsync(userId);
            categories = await CategoryService.GetAllAsync(userId);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading data: {ex.Message}");
        }
    }

    private IEnumerable<TransactionDto> FilteredAndSortedTransactions
    {
        get
        {
            var filtered = transactions.AsEnumerable();

            // Filtrar por categoría
            if (filterCategoryId > 0)
            {
                filtered = filtered.Where(t => t.CategoryId == filterCategoryId);
            }

            // Filtrar por tipo
            if (!string.IsNullOrEmpty(filterType))
            {
                var type = filterType == "Income" ? TransactionType.Income : TransactionType.Expense;
                filtered = filtered.Where(t => GetCategoryType(t.CategoryId) == type);
            }

            // Ordenar
            filtered = sortOrder switch
            {
                "oldest" => filtered.OrderBy(t => t.Date),
                "highest" => filtered.OrderByDescending(t => t.Amount),
                "lowest" => filtered.OrderBy(t => t.Amount),
                _ => filtered.OrderByDescending(t => t.Date) // newest
            };

            return filtered;
        }
    }

    private TransactionType GetCategoryType(int categoryId)
    {
        return categories.FirstOrDefault(c => c.CategoryId == categoryId)?.Type ?? TransactionType.Expense;
    }

    private decimal CalculateTotalIncome()
    {
        return FilteredAndSortedTransactions
            .Where(t => GetCategoryType(t.CategoryId) == TransactionType.Income)
            .Sum(t => t.Amount);
    }

    private decimal CalculateTotalExpense()
    {
        return FilteredAndSortedTransactions
            .Where(t => GetCategoryType(t.CategoryId) == TransactionType.Expense)
            .Sum(t => t.Amount);
    }

    private void OpenCreateModal()
    {
        currentTransaction = new TransactionDto
        {
            Date = DateTime.Now,
            CategoryId = 0
        };
        isEditMode = false;
        showModal = true;
    }

    private void OpenEditModal(TransactionDto transaction)
    {
        currentTransaction = new TransactionDto
        {
            TransactionId = transaction.TransactionId,
            CategoryId = transaction.CategoryId,
            Amount = transaction.Amount,
            Note = transaction.Note,
            Date = transaction.Date
        };
        isEditMode = true;
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
        currentTransaction = new();
        isSaving = false;
    }

    private async Task SaveTransaction()
    {
        try
        {
            if (currentTransaction.CategoryId == 0)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Por favor selecciona una categoría");
                return;
            }

            isSaving = true;

            if (isEditMode)
            {
                await TransactionService.UpdateAsync(currentTransaction, userId);
            }
            else
            {
                await TransactionService.CreateAsync(currentTransaction, userId);
            }

            await LoadData();
            CloseModal();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving transaction: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "Error al guardar la transacción");
            isSaving = false;
        }
    }

    private async Task DeleteTransaction(int transactionId)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm",
            "¿Estás seguro de eliminar esta transacción? Esta acción no se puede deshacer.");

        if (confirmed)
        {
            try
            {
                await TransactionService.DeleteAsync(transactionId, userId);
                await LoadData();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error deleting transaction: {ex.Message}");
                await JSRuntime.InvokeVoidAsync("alert", "Error al eliminar la transacción");
            }
        }
    }
}