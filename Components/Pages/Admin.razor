@page "/admin"
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@using Microsoft.JSInterop
@using MisFinanzas.Infrastructure.Interfaces
@using MisFinanzas.Domain.DTOs
@inject IUserService UserService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<PageTitle>Panel de Administración - MisFinanzas</PageTitle>

<div class="admin-container">
    @if (!isAuthorized)
    {
        <div class="text-center text-white">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Verificando permisos...</span>
            </div>
            <p class="mt-3">Verificando permisos...</p>
        </div>
    }
    else
    {
        <!-- Header -->
        <div class="admin-header">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h1>👨‍💼 Panel de Administración</h1>
                    <p class="mb-0">Gestiona usuarios y visualiza estadísticas del sistema</p>
                </div>
                <div>
                    <a href="/logout" class="btn btn-danger">
                        <i class="bi bi-box-arrow-right"></i> Cerrar Sesión
                    </a>
                </div>
            </div>
        </div>

        <!-- Estadísticas -->
        <div class="row mb-4">
            <div class="col-md-4">
                <div class="stats-card">
                    <div class="stats-icon">👥</div>
                    <div class="stats-info">
                        <h3>@totalUsers</h3>
                        <p>Total de Usuarios</p>
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="stats-card">
                    <div class="stats-icon">✅</div>
                    <div class="stats-info">
                        <h3>@activeUsers</h3>
                        <p>Usuarios Activos</p>
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="stats-card">
                    <div class="stats-icon">⛔</div>
                    <div class="stats-info">
                        <h3>@inactiveUsers</h3>
                        <p>Usuarios Inactivos</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Mensajes -->
        @if (!string.IsNullOrEmpty(successMessage))
        {
            <div class="alert alert-success alert-dismissible fade show" role="alert">
                @successMessage
                <button type="button" class="btn-close" @onclick="() => successMessage = null"></button>
            </div>
        }

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                @errorMessage
                <button type="button" class="btn-close" @onclick="() => errorMessage = null"></button>
            </div>
        }

        <!-- Tabla de Usuarios -->
        <div class="users-table-card">
            <div class="card-header">
                <h4>📋 Lista de Usuarios</h4>
            </div>
            <div class="card-body">
                @if (isLoading)
                {
                    <div class="text-center py-5">
                        <div class="spinner-border text-light" role="status">
                            <span class="visually-hidden">Cargando...</span>
                        </div>
                        <p class="text-white mt-3">Cargando usuarios...</p>
                    </div>
                }
                else if (users == null || !users.Any())
                {
                    <div class="text-center py-5">
                        <p class="text-white">No hay usuarios registrados</p>
                    </div>
                }
                else
                {
                    <div class="table-responsive">
                        <table class="table table-dark table-hover">
                            <thead>
                                <tr>
                                    <th>Usuario</th>
                                    <th>Email</th>
                                    <th>Contraseña</th>
                                    <th>Nombre Completo</th>
                                    <th>Rol</th>
                                    <th>Estado</th>
                                    <th>Último Acceso</th>
                                    <th>Acciones</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var user in users)
                                {
                                    <tr class="@(user.IsActive ? "" : "table-secondary")">
                                        <td>
                                            <strong>@user.UserName</strong>
                                        </td>
                                        <td>@user.Email</td>
                                        <td>
                                            <span class="password-display">@user.Password</span>
                                        </td>
                                        <td>@(user.FullName ?? "-")</td>
                                        <td>
                                            <span class="badge @(user.UserRole == "Admin" ? "bg-danger" : "bg-primary")">
                                                @user.RoleDisplay
                                            </span>
                                        </td>
                                        <td>
                                            <span class="badge @(user.IsActive ? "bg-success" : "bg-secondary")">
                                                @user.StatusDisplay
                                            </span>
                                        </td>
                                        <td>
                                            <small>@user.LastLoginDisplay</small>
                                        </td>
                                        <td>
                                            @if (user.UserRole != "Admin")
                                            {
                                                <div class="btn-group btn-group-sm" role="group">
                                                    <button class="btn btn-warning"
                                                            @onclick="() => ToggleUserStatus(user.Id)"
                                                            title="@(user.IsActive ? "Desactivar" : "Activar")">
                                                        <i class="bi @(user.IsActive ? "bi-pause-circle" : "bi-play-circle")"></i>
                                                    </button>
                                                    <button class="btn btn-danger"
                                                            @onclick="() => ConfirmDelete(user.Id, user.UserName)"
                                                            title="Eliminar">
                                                        <i class="bi bi-trash"></i>
                                                    </button>
                                                </div>
                                            }
                                            else
                                            {
                                                <span class="text-muted">
                                                    <small>Protegido</small>
                                                </span>
                                            }
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
            </div>
        </div>
    }
</div>

<!-- Modal de Confirmación de Eliminación -->
@if (showDeleteModal)
{
    <div class="modal-backdrop show"></div>
    <div class="modal show d-block" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content bg-dark text-white">
                <div class="modal-header border-secondary">
                    <h5 class="modal-title">⚠️ Confirmar Eliminación</h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="CancelDelete"></button>
                </div>
                <div class="modal-body">
                    <p>¿Estás seguro de que deseas eliminar al usuario <strong>@userToDelete</strong>?</p>
                    <p class="text-danger mb-0">
                        <small>Esta acción no se puede deshacer.</small>
                    </p>
                </div>
                <div class="modal-footer border-secondary">
                    <button type="button" class="btn btn-secondary" @onclick="CancelDelete">Cancelar</button>
                    <button type="button" class="btn btn-danger" @onclick="DeleteUser">
                        <i class="bi bi-trash"></i> Eliminar
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private bool isAuthorized = false;
    private bool isLoading = true;
    private List<UserDetailDto> users = new();

    // Estadísticas
    private int totalUsers = 0;
    private int activeUsers = 0;
    private int inactiveUsers = 0;

    // Mensajes
    private string? successMessage;
    private string? errorMessage;

    // Modal de eliminación
    private bool showDeleteModal = false;
    private string? userIdToDelete;
    private string? userToDelete;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await CheckAuthorization();

            if (isAuthorized)
            {
                await LoadData();
            }

            StateHasChanged();
        }
    }

    private async Task CheckAuthorization()
    {
        try
        {
            var userRole = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "userRole");

            if (string.IsNullOrEmpty(userRole) || userRole != "Admin")
            {
                await JSRuntime.InvokeVoidAsync("eval", "window.location.href = '/login'");
                return;
            }

            isAuthorized = true;
        }
        catch
        {
            await JSRuntime.InvokeVoidAsync("eval", "window.location.href = '/login'");
        }
    }

    private async Task LoadData()
    {
        try
        {
            isLoading = true;

            // Cargar usuarios
            users = await UserService.GetAllUsersAsync();

            // Cargar estadísticas
            totalUsers = await UserService.GetTotalUsersCountAsync();
            activeUsers = await UserService.GetActiveUsersCountAsync();
            inactiveUsers = await UserService.GetInactiveUsersCountAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al cargar datos: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task ToggleUserStatus(string userId)
    {
        try
        {
            var result = await UserService.ToggleUserStatusAsync(userId);

            if (result)
            {
                successMessage = "Estado del usuario actualizado correctamente";
                await LoadData();
            }
            else
            {
                errorMessage = "No se pudo actualizar el estado del usuario";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
    }

    private void ConfirmDelete(string userId, string username)
    {
        userIdToDelete = userId;
        userToDelete = username;
        showDeleteModal = true;
    }

    private void CancelDelete()
    {
        showDeleteModal = false;
        userIdToDelete = null;
        userToDelete = null;
    }

    private async Task DeleteUser()
    {
        try
        {
            if (string.IsNullOrEmpty(userIdToDelete))
                return;

            var result = await UserService.DeleteUserAsync(userIdToDelete);

            if (result)
            {
                successMessage = $"Usuario '{userToDelete}' eliminado correctamente";
                showDeleteModal = false;
                userIdToDelete = null;
                userToDelete = null;
                await LoadData();
            }
            else
            {
                errorMessage = "No se pudo eliminar el usuario";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
    }
}